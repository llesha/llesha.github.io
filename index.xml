<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WaterStop on</title><link>https://llesha.github.io/</link><description>Recent content in WaterStop on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://llesha.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://llesha.github.io/Assignment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/Assignment/</guid><description>Assignment Left side of the assignment before = is lvalue, right side is rvalue
Lvalue There are 4 types of possible lvalues</description></item><item><title/><link>https://llesha.github.io/kotlin/monaco-editor/CHANGELOG/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/kotlin/monaco-editor/CHANGELOG/</guid><description>Monaco Editor Changelog [0.33.0] Breaking Changes InlayHintKind.Other is removed. Thank you Contributions to monaco-editor:
@Dan1ve (Daniel Veihelmann): Make Vite sample code Firefox compatible PR #2991 @philipturner (Philip Turner): Add @noDerivative modifier to Swift PR #2957 [0.</description></item><item><title/><link>https://llesha.github.io/kotlin/monaco-editor/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/kotlin/monaco-editor/README/</guid><description>Monaco Editor
The Monaco Editor is the code editor which powers VS Code, with the features better described here.</description></item><item><title/><link>https://llesha.github.io/regina/typization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/typization/</guid><description>Dynamically typed languages check variable type during runtime, meaning it is more error-prone.On the contrary, statically typed languages check variable type during compilation.</description></item><item><title/><link>https://llesha.github.io/regina/why/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/why/</guid><description>Why I created a programming language TLDR: I didn&amp;rsquo;t think about making a library for dynamic instantiation. I should&amp;rsquo;ve made a library - that is an optimal path.</description></item><item><title>Abstract Syntax Tree</title><link>https://llesha.github.io/programming/ast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/ast/</guid><description>Abstract Syntax Tree (AST) is key concept in program evaluation. It is a tree with tokens as its nodes. Tree is a better structure than sequence.</description></item><item><title>Basic memory management</title><link>https://llesha.github.io/programming/heap-and-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/heap-and-stack/</guid><description>Last fall, I had an interview. They asked me about differences between heap and stack, how references and variables are stored.</description></item><item><title>C#: Boxing, unboxing and equality operator</title><link>https://llesha.github.io/programming/boxing-and-equality-cs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/boxing-and-equality-cs/</guid><description>Boxing / unboxing Boxing/unboxing has to do with reference and value types. Value types store their values on stack (usually primitives).</description></item><item><title>C++ Memory model</title><link>https://llesha.github.io/programming/cpp-pointers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/cpp-pointers/</guid><description>Memory is a two column table. First row contains addresses, second row contains values.
1 int x = 4; When variable is assigned, an empty memory row cell is chosen.</description></item><item><title>Design decisions</title><link>https://llesha.github.io/regina/design-decisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/design-decisions/</guid><description>Why null is 0? now it is not First, let&amp;rsquo;s provide some context.
I do not find void type useful. Therefore, void == null.</description></item><item><title>Devlog 1. Bad globals</title><link>https://llesha.github.io/programming/devlog1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/devlog1/</guid><description>What is a symbol table? Symbol table stores current program state. I separated it into three levels, turning SymbolTable into a kind of manager-facade:</description></item><item><title>Devlog 2. Link class. Removing state</title><link>https://llesha.github.io/programming/devlog2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/devlog2/</guid><description>Link class is for evaluating links. A link is a statement in form of a.b.c, where all expressions after dots (in this case b and c) are either identifiers1, indexes2 or invocations3.</description></item><item><title>Dynamic instantiation</title><link>https://llesha.github.io/regina/dynamic-instantiation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/dynamic-instantiation/</guid><description>TLDR Difference between other languages and ReGIna is dynamic instantiation. In short, properties in classes will be assigned only after their dependencies are assigned, allowing recursive properties of same class A inside class A.</description></item><item><title>Eye focus and main eye</title><link>https://llesha.github.io/notes/eyes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/notes/eyes/</guid><description>On sketches that illustrate eye focus, it is shown that humans, when looking straight ahead, focus their vision at a point between their eyes.</description></item><item><title>Global</title><link>https://llesha.github.io/regina/global/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/global/</guid><description>Global is a file that&amp;rsquo;s imported by default.
Functions If you defined a function with the same signature, these functions are called with Global.</description></item><item><title>How languages are run?</title><link>https://llesha.github.io/programming/transpilers-compilers-interpreters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/transpilers-compilers-interpreters/</guid><description>People in the programing languages field use fancy buzzwords like translator, transpiler, compiler, interpreter, JIT (just in time) compiler. Let&amp;rsquo;s figure out what they mean.</description></item><item><title>IDE</title><link>https://llesha.github.io/regina/ide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/ide/</guid><description/></item><item><title>Introduction to grammars</title><link>https://llesha.github.io/programming/introduction-to-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/introduction-to-grammars/</guid><description>Grammar defines a set of strings (words), which is called a language. Essentially grammar is a Dictionary &amp;lt;String, String&amp;gt;, where each dictionary entry is a grammar rule.</description></item><item><title>Multithreading. Primitive tools, definitions</title><link>https://llesha.github.io/programming/multithreading1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/multithreading1/</guid><description>First, let&amp;rsquo;s clarify some definitions (I won&amp;rsquo;t go too deep into that):
Process Process is a running program, that has its own address space in memory (most of it is heap).</description></item><item><title>Multithreading. Problems, Object methods</title><link>https://llesha.github.io/programming/multithreading2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/multithreading2/</guid><description>Thread problems Thread problems have names. Here are the most popular ones.
Deadlock N locks locked forever, waiting for each other.</description></item><item><title>Parsers</title><link>https://llesha.github.io/programming/parsers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/parsers/</guid><description>As with the first article, I wrote this one on a computer, because the topic is hard to tackle. I knew I would have to make a lot of edits and rearrangements.</description></item><item><title>Programming notes</title><link>https://llesha.github.io/programming/programming-notes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/programming-notes/</guid><description>Links to all articles:
28 June: Heap and Stack
29 June: How languages are run?
30 June: Abstract syntax tree</description></item><item><title>Quality of life</title><link>https://llesha.github.io/programming/quality-of-life/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/quality-of-life/</guid><description>Recently I started working on a new project, that also requires creating a custom programming language. I noticed a significant difference with changing my approach: now I use python and Lark for parsing EBNF.</description></item><item><title>ReGIna</title><link>https://llesha.github.io/regina/regina/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/regina/</guid><description>is a dynamically typed language with syntax similar to Kotlin and Python.
Documentation It is highly recommended to read in following order, don&amp;rsquo;t click on links in articles for the first time:</description></item><item><title>Shallow villain traits</title><link>https://llesha.github.io/programming/shallow-villain-traits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/shallow-villain-traits/</guid><description/></item><item><title>SQL</title><link>https://llesha.github.io/programming/SQL/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/SQL/</guid><description>created from this free course
Table of Contents Definitions Statements Create Select Insert into Alter table Update Delete from Order by Limit Case Group by Having Constraints Data types WHERE operators Wildcards Aggregates Count Sum Max, min, avg Round Multiple tables Join Foreign key Left join Cross join Union With Other keywords IFNULL OFFSET IN Functions DATE_ADD Definitions Table a.</description></item><item><title>std/math.rgn</title><link>https://llesha.github.io/regina/std/math/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/std/math/</guid><description>Functions rndInt</description></item><item><title>Syntax</title><link>https://llesha.github.io/regina/syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/syntax/</guid><description>Table of Contents Top level declarations Class Object Function Imports Operators Boolean operators Boolean values Arithmetic operators Ternary operator Property/variable assignment References Cycles while foreach Foreach in list Foreach in String Foreach in range 1.</description></item><item><title>Table of operator precedence</title><link>https://llesha.github.io/regina/toop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/toop/</guid><description>Table of operator precedence Operator Description postfix: (), [], . change operators' precedence with parentheses takes element from array or string gets property of class prefix: !</description></item><item><title>Things that hopefully you will never encounter</title><link>https://llesha.github.io/regina/advanced/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/advanced/</guid><description>But are good to know anyway.
Dictionary mutable key 1 2 3 4 5 6 7 8 9 10 11 fun main() { a = [1] t = {a: &amp;#34;value&amp;#34;} log(t) log(t[[1]]) a.</description></item><item><title>Types</title><link>https://llesha.github.io/regina/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/types/</guid><description>Table of Contents Value types Reference types Null Number Documentation Boolean Int Documentation Double Documentation String Documentation List Documentation Dictionary Documentation Examples Type properties Constructor Inheritance Object There are three value types and three reference types.</description></item><item><title>Visibility scopes</title><link>https://llesha.github.io/regina/scopes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/regina/scopes/</guid><description>Table of Contents Global scope Class instance scope Function scope Block scope Accessing declarations with same names Import priority Using functions with same signature All scopes, sorted from the most visible to the least:</description></item><item><title>Why game making is not for me</title><link>https://llesha.github.io/programming/why-gamemaking-is-not-for-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://llesha.github.io/programming/why-gamemaking-is-not-for-me/</guid><description>TLDR: it is frustrating, initial idea and result have a huge difference, because I associate my game ideas with emotions, that a player feels during the game.</description></item></channel></rss>