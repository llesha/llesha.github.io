<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>WaterStop on</title><link>https://alex5041.github.io/</link><description>Recent content in WaterStop on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://alex5041.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://alex5041.github.io/Assignment/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/Assignment/</guid><description>Assignment Left side of the assignment before = is lvalue, right side is rvalue
Lvalue There are 4 types of possible lvalues</description></item><item><title/><link>https://alex5041.github.io/kotlin/monaco-editor/CHANGELOG/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/kotlin/monaco-editor/CHANGELOG/</guid><description>Monaco Editor Changelog [0.33.0] Breaking Changes InlayHintKind.Other is removed. Thank you Contributions to monaco-editor:
@Dan1ve (Daniel Veihelmann): Make Vite sample code Firefox compatible PR #2991 @philipturner (Philip Turner): Add @noDerivative modifier to Swift PR #2957 [0.</description></item><item><title/><link>https://alex5041.github.io/kotlin/monaco-editor/README/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/kotlin/monaco-editor/README/</guid><description>Monaco Editor
The Monaco Editor is the code editor which powers VS Code, with the features better described here.</description></item><item><title/><link>https://alex5041.github.io/regina/typization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/typization/</guid><description>Dynamically typed languages check variable type during runtime, meaning it is more error-prone.On the contrary, statically typed languages check variable type during compilation.</description></item><item><title/><link>https://alex5041.github.io/regina/why/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/why/</guid><description>Why I created a programming language TLDR: I didn&amp;rsquo;t think about making a library for dynamic instantiation. I should&amp;rsquo;ve made a library - that is an optimal path.</description></item><item><title>100 writing days</title><link>https://alex5041.github.io/100-days/100-writing-days/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/100-writing-days/</guid><description>Previously I did 100 reading days, but looking back, I think It was mostly about achieving consistency rather than improving pronunciation.</description></item><item><title>Abstract Syntax Tree</title><link>https://alex5041.github.io/100-days/ast/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/ast/</guid><description>Abstract Syntax Tree (AST) is key concept in program evaluation. It is a tree with tokens as its nodes. Tree is a better structure than sequence.</description></item><item><title>Basic memory management</title><link>https://alex5041.github.io/100-days/heap-and-stack/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/heap-and-stack/</guid><description>Last fall, I had an interview. They asked me about differences between heap and stack, how references and variables are stored.</description></item><item><title>C#: Boxing, unboxing and equality operator</title><link>https://alex5041.github.io/100-days/boxing-and-equality-cs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/boxing-and-equality-cs/</guid><description>Boxing / unboxing Boxing/unboxing has to do with reference and value types. Value types store their values on stack (usually primitives).</description></item><item><title>C++ Memory model</title><link>https://alex5041.github.io/100-days/cpp-pointers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/cpp-pointers/</guid><description>Memory is a two column table. First row contains addresses, second row contains values.
1 int x = 4; When variable is assigned, an empty memory row cell is chosen.</description></item><item><title>Devlog 1. Bad globals</title><link>https://alex5041.github.io/100-days/devlog1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/devlog1/</guid><description>What is a symbol table? Symbol table stores current program state. I separated it into three levels, turning SymbolTable into a kind of manager-facade:</description></item><item><title>Devlog 2. Link class. Removing state</title><link>https://alex5041.github.io/100-days/devlog2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/devlog2/</guid><description>Link class is for evaluating links. A link is a statement in form of a.b.c, where all expressions after dots (in this case b and c) are either identifiers1, indexes2 or invocations3.</description></item><item><title>Eye focus and main eye</title><link>https://alex5041.github.io/notes/eyes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/notes/eyes/</guid><description>On sketches that illustrate eye focus, it is shown that humans, when looking straight ahead, focus their vision at a point between their eyes.</description></item><item><title>How languages are run?</title><link>https://alex5041.github.io/100-days/transpilers-compilers-interpreters/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/transpilers-compilers-interpreters/</guid><description>People in the programing languages field use fancy buzzwords like translator, transpiler, compiler, interpreter, JIT (just in time) compiler. Let&amp;rsquo;s figure out what they mean.</description></item><item><title>IDE</title><link>https://alex5041.github.io/regina/ide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/ide/</guid><description/></item><item><title>Introduction to grammars</title><link>https://alex5041.github.io/100-days/introduction-to-grammars/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/introduction-to-grammars/</guid><description>Grammar defines a set of strings (words), which is called a language. Essentially grammar is a Dictionary &amp;lt;String, String&amp;gt;, where each dictionary entry is a grammar rule.</description></item><item><title>Multithreading. Primitive tools, definitions</title><link>https://alex5041.github.io/100-days/multithreading1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/multithreading1/</guid><description>First, let&amp;rsquo;s clarify some definitions (I won&amp;rsquo;t go too deep into that):
Process Process is a running program, that has its own address space in memory (most of it is heap).</description></item><item><title>Multithreading. Problems, Object methods</title><link>https://alex5041.github.io/100-days/multithreading2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/multithreading2/</guid><description>Thread problems Thread problems have names. Here are the most popular ones.
Deadlock N locks locked forever, waiting for each other.</description></item><item><title>Parsers</title><link>https://alex5041.github.io/100-days/parsers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/parsers/</guid><description>As with the first article, I wrote this one on a computer, because the topic is hard to tackle. I knew I would have to make a lot of edits and rearrangements.</description></item><item><title>Quality of life</title><link>https://alex5041.github.io/100-days/quality-of-life/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/quality-of-life/</guid><description>Recently I started working on a new project, that also requires creating a custom programming language. I noticed a significant difference with changing my approach: now I use python and Lark for parsing EBNF.</description></item><item><title>ReGIna</title><link>https://alex5041.github.io/regina/regina/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/regina/</guid><description>is a dynamically typed language with syntax similar to Kotlin and Python.
Core idea Difference between other languages and ReGIna is dynamic instantiation.</description></item><item><title>Shallow villain traits</title><link>https://alex5041.github.io/100-days/shallow-villain-traits/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/shallow-villain-traits/</guid><description/></item><item><title>Syntax</title><link>https://alex5041.github.io/regina/syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/syntax/</guid><description>ReGIna&amp;rsquo;s syntax is an amalgamation of kotlin and python.
Declarations 1 2 3 4 5 6 7 8 9 10 11 12 13 14 from typing import Iterator # This is an example class Math: @staticmethod def fib(n: int) -&amp;gt; Iterator[int]: &amp;#34;&amp;#34;&amp;#34; Fibonacci series up to n &amp;#34;&amp;#34;&amp;#34; a, b = 0, 1 while a &amp;lt; n: yield a a, b = b, a + b result = sum(Math.</description></item><item><title>Why game making is not for me</title><link>https://alex5041.github.io/100-days/why-gamemaking-is-not-for-me/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/100-days/why-gamemaking-is-not-for-me/</guid><description>TLDR: it is frustrating, initial idea and result have a huge difference, because I associate my game ideas with emotions, that a player feels during the game.</description></item></channel></rss>