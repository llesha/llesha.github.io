<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>regina-docs on llesha</title>
    <link>/tags/regina-docs/</link>
    <description>Recent content in regina-docs on llesha</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="/tags/regina-docs/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Global</title>
      <link>/regina/global/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/regina/global/</guid>
      <description>Global is a file that&amp;rsquo;s imported by default.&#xA;fun print(x): Null { // print `x` into console } fun except(x) { // throws exception with `x` as message } fun input(input): Any { // not working in [IDE]()*. Receives console input and returns it. } fun write(content: String, path: String) { // write `content` to `path` file } fun read(path: String): String { // read file from `path` and return the result } fun exists(path: String): Bool { // checks if file by `path` exists.</description>
    </item>
    <item>
      <title>Syntax</title>
      <link>/regina/syntax/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/regina/syntax/</guid>
      <description>Table of Contents Top level declarations Class Object Function Imports Operators Boolean operators Arithmetic operators Ternary operator Property/variable assignment References Cycles while foreach 1. Accessing properties Accessing and assigning collection elements List Dictionary ReGIna&amp;rsquo;s syntax is an amalgamation of kotlin and python.&#xA;Top level declarations Essentially, file is a set of classes, objects, functions and imports. Executable and importable files have .rgn format.&#xA;Class Class declaration should satisfy following format:</description>
    </item>
    <item>
      <title>Table of operator precedence</title>
      <link>/regina/toop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/regina/toop/</guid>
      <description></description>
    </item>
    <item>
      <title>Types</title>
      <link>/regina/types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/regina/types/</guid>
      <description>Table of Contents Value types Reference types Null Number Documentation Boolean Int Double String Documentation List Documentation Dictionary Documentation Examples Type properties Constructor Inheritance Object There are three value types and three reference types.&#xA;Value types Int Double String Reference types List Dictionary Class instance Assigning another variable a variable of a reference type will pass it by reference. Same holds for passing function arguments&#xA;fun main() { arr = [] change(arr) // here arr == [1] other = arr other.</description>
    </item>
    <item>
      <title>Visibility scopes</title>
      <link>/regina/scopes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>/regina/scopes/</guid>
      <description>Table of Contents Global scope Class instance scope Function scope Block scope Accessing declarations with same names Import priority Using functions with same signature All scopes, sorted from the most visible to the least:&#xA;Global scope Classes, objects and functions1 are declared in global scope. Imported file declarations are in global scope too. Global scope declarations are visible everywhere.&#xA;Class instance scope In class instance scope properties and functions are declared.</description>
    </item>
  </channel>
</rss>
