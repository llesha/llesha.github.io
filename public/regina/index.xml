<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Regina language on llesha</title>
    <link>//localhost:1313/regina/</link>
    <description>Recent content in Regina language on llesha</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Nov 2022 00:00:00 +0000</lastBuildDate>
    <atom:link href="//localhost:1313/regina/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Syntax</title>
      <link>//localhost:1313/regina/syntax/</link>
      <pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/syntax/</guid>
      <description>Table of Contents Top level declarations Operators References Cycles Code conventions Accessing and assigning collection elements ReGIna&amp;rsquo;s syntax is an amalgamation of kotlin and python.&#xA;Top level declarations Essentially, file is a set of classes, objects, functions and imports. Executable and importable files have .rgn format.&#xA;Class Class declaration should satisfy following format:&#xA;class ClassName : SuperClassName { ... } where : SuperClassName is optional.&#xA;Class contains properties and functions.</description>
    </item>
    <item>
      <title>Global</title>
      <link>//localhost:1313/regina/global/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/global/</guid>
      <description>Global is a file that&amp;rsquo;s imported by default.&#xA;fun print(x): Null { // print `x` into console } fun except(x) { // throws exception with `x` as message } fun input(input): Any { // not working in [IDE]()*. Receives console input and returns it. } fun write(content: String, path: String) { // write `content` to `path` file } fun read(path: String): String { // read file from `path` and return the result } fun exists(path: String): Bool { // checks if file by `path` exists.</description>
    </item>
    <item>
      <title>Things that hopefully you will never encounter</title>
      <link>//localhost:1313/regina/advanced/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/advanced/</guid>
      <description>But are good to know anyway.&#xA;Dictionary mutable key fun main() { a = [1] t = {a: &amp;#34;value&amp;#34;} print(t) print(t[[1]]) a.add(2) print(t) print(t.entries[0][&amp;#34;key&amp;#34;]) print(t[t.entries[0][&amp;#34;key&amp;#34;]]) print(t[[1, 2]]) } fun main() { val a = mutableListOf(&amp;#34;a&amp;#34;) val m = mutableMapOf(a to &amp;#34;b&amp;#34;) println(m[mutableListOf(&amp;#34;a&amp;#34;)]) // b a.add(&amp;#34;b&amp;#34;) println(m) // {[a, b]=b} println(m[mutableListOf(&amp;#34;a&amp;#34;, &amp;#34;b&amp;#34;)]) // null } # frozenset # tuple </description>
    </item>
    <item>
      <title>Visibility scopes</title>
      <link>//localhost:1313/regina/scopes/</link>
      <pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/scopes/</guid>
      <description>Table of Contents Global scope Class instance scope Function scope Block scope Accessing declarations with same names All scopes, sorted from the most visible to the least:&#xA;Global scope Classes, objects and functions1 are declared in global scope. Imported file declarations are in global scope too. Global scope declarations are visible everywhere.&#xA;Class instance scope In class instance scope properties and functions are declared. These declarations are visible from a class instance and inside class functions.</description>
    </item>
    <item>
      <title>Design decisions</title>
      <link>//localhost:1313/regina/design-decisions/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/design-decisions/</guid>
      <description>Why null is 0? now it is not First, let&amp;rsquo;s provide some context.&#xA;I do not find void type useful. Therefore, void == null.&#xA;Now, let&amp;rsquo;s state all cases when null appears:&#xA;function call with no return parent property1 ?. operator. Not many cases to consider, only last one is the meaningful one. It is important to throw exceptions for not found properties, because it might be a typo. Typos are hard to find.</description>
    </item>
    <item>
      <title>Types</title>
      <link>//localhost:1313/regina/types/</link>
      <pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/types/</guid>
      <description>Table of Contents Null Number String List Dictionary Documentation Type Object There are three value types and three reference types.&#xA;Value types Int Double String Reference types List Dictionary Class instance Assigning another variable a variable of a reference type will pass it by reference. Same holds for passing function arguments&#xA;fun main() { arr = [] change(arr) // here arr == [1] other = arr other.removeAt(0) // here arr == [] } fun change() { arr.</description>
    </item>
    <item>
      <title>Dynamic instantiation</title>
      <link>//localhost:1313/regina/dynamic-instantiation/</link>
      <pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/dynamic-instantiation/</guid>
      <description>TLDR Difference between other languages and ReGIna is dynamic instantiation. In short, properties in classes will be assigned only after their dependencies are assigned, allowing recursive properties of same class A inside class A.&#xA;Idea Classes can have references to other classes inside them as properties. These property-classes are evaluated dynamically. Take a look at this example:&#xA;class Node export rect { // export = false - can deny export iter = if (parent) parent.</description>
    </item>
    <item>
      <title>Table of operator precedence</title>
      <link>//localhost:1313/regina/toop/</link>
      <pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/toop/</guid>
      <description>Table of operator precedence Operator Description postfix: (), [], . change operators&#39; precedence with parentheses takes element from array or string gets property of class prefix: !, - not, unary minus *, /, % multiplication division modulus +,- adds two numbers or element to array or concatenates two strings arithmetic minus ==, !=, &gt;, &amp;lt;, &gt;=, &amp;lt;= comparison operators, return 1 if true, 0 if false &amp;&amp; logic &#34;and&#34; &amp;#124;&amp;#124; logic &#34;</description>
    </item>
    <item>
      <title>Dynamic and static type systems</title>
      <link>//localhost:1313/regina/typization/</link>
      <pubDate>Mon, 06 Jun 2022 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/typization/</guid>
      <description>Dynamically typed languages check variable type during runtime, meaning it is more error-prone.On the contrary, statically typed languages check variable type during compilation.&#xA;Often dynamically typed languages can reassign the same variable with a different type. Also, variable declaration and assignment are similar for dynamic languages.&#xA;# Python a = 2 a = &amp;#34;2&amp;#34; # not an error One of the clues of static typing is in variable declaration: usually variables have a type before a name in declaration:</description>
    </item>
    <item>
      <title>Why I created a programming language</title>
      <link>//localhost:1313/regina/why/</link>
      <pubDate>Sun, 13 Jan 2019 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/why/</guid>
      <description>TLDR: I didn&amp;rsquo;t think about making a library for dynamic instantiation. I should&amp;rsquo;ve made a library - that is an optimal path.&#xA;Birth of &amp;lsquo;generator of generators&amp;rsquo; I liked creating visual generators. But I didn&amp;rsquo;t like spending 2 weeks to flesh out an idea and to implement unuseful tools like deployment to web or geometry functions.&#xA;Looking back, I realise that I wasted much time due to switching between tools: for plant generator I used C# and .</description>
    </item>
    <item>
      <title>std/math.rgn</title>
      <link>//localhost:1313/regina/std/math/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/regina/std/math/</guid>
      <description>Functions rndInt</description>
    </item>
  </channel>
</rss>
