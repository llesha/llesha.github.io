{"/":{"title":"llesha","content":"\nHello! My name is Alex, and I'm a software engineer. On [itch.io](https://llesha.itch.io/) I put\nmy playable projects. On [GitHub](https://github.com/llesha) I put source code.\n\nHere is my [CV](https://llesha.github.io/cv). \n\n# Site content\n\n[ReGIna](regina/regina) - documentation of programming language\n\n[Programming notes](programming/programming-notes)\n\n[Other notes](notes)\n","lastmodified":"2023-06-27T10:36:05.206686499Z","tags":null},"/Assignment":{"title":"","content":"# Assignment\nLeft side of the assignment before `=` is lvalue, right side is rvalue\n## Lvalue\nThere are 4 types of possible lvalues\n### Variable\n\n### Property\nSimilar to variables, however their scope is class or primitive.\n### Indexing\nChanging array's  element is possible with `arr[i] = ...`\n### Reference","lastmodified":"2023-06-27T10:36:05.206686499Z","tags":null},"/cv/cv":{"title":"cv","content":"","lastmodified":"2023-06-27T10:36:05.206686499Z","tags":null},"/kotlin/monaco-editor/CHANGELOG":{"title":"","content":"# Monaco Editor Changelog\n\n## [0.33.0]\n\n### Breaking Changes\n\n- `InlayHintKind.Other` is removed.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [@Dan1ve (Daniel Veihelmann)](https://github.com/Dan1ve): Make Vite sample code Firefox compatible [PR #2991](https://github.com/microsoft/monaco-editor/pull/2991)\n- [@philipturner (Philip Turner)](https://github.com/philipturner): Add `@noDerivative` modifier to Swift [PR #2957](https://github.com/microsoft/monaco-editor/pull/2957)\n\n## [0.32.1] (04.02.2022)\n\n- fixes [an issue with service initialization](https://github.com/microsoft/monaco-editor/issues/2941).\n\n## [0.32.0] (03.02.2022)\n\n### Breaking Changes\n\n- The binary format for `IEncodedLineTokens` has changed to support strikethrough text.\n- `IDiffEditor.getDomNode()` has been renamed to `IDiffEditor.getContainerDomNode()`.\n- `InlayHint.text` has been replaced by `InlayHint.label` and `InlayHintsProvider.provideInlayHints` now returns an `InlayHintList`.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [@blutorange (Andre Wachsmuth)](https://github.com/blutorange): Implements #2383 Add syntax modes for FreeMarker template language [PR #2847](https://github.com/microsoft/monaco-editor/pull/2847)\n- [@forensicmike (forensicmike1)](https://github.com/forensicmike): Add \"cd monaco-editor\" to the step by step commandline instructions for cloning and running the samples [PR #2894](https://github.com/microsoft/monaco-editor/pull/2894)\n- [@juan-carlos-diaz](https://github.com/juan-carlos-diaz): Fix #2851 Highlight correctly the attributes and identifiers (with dashes) for Shell language [PR #2871](https://github.com/microsoft/monaco-editor/pull/2871)\n- [@MasterOdin (Matthew Peveler)](https://github.com/MasterOdin): Only run publish workflow on main monaco-editor repo [PR #2926](https://github.com/microsoft/monaco-editor/pull/2926)\n- [@philipturner (Philip Turner)](https://github.com/philipturner)\n  - Update Swift language specification to version 5.5 [PR #2855](https://github.com/microsoft/monaco-editor/pull/2855)\n  - Add @preconcurrency to Swift declaration attributes [PR #2924](https://github.com/microsoft/monaco-editor/pull/2924)\n- [@rcjsuen (Remy Suen)](https://github.com/rcjsuen): Support hyphenated HTML tags in Markdown syntax [PR #2864](https://github.com/microsoft/monaco-editor/pull/2864)\n- [@resistdesign (Ryan Graff)](https://github.com/resistdesign): doc: (samples) Simplify Browser ESM Parcel build [PR #2832](https://github.com/microsoft/monaco-editor/pull/2832)\n- [@ValeraS (Valeriy)](https://github.com/ValeraS)\n  - fix(monaco-editor-webpack-plugin): load monaco-editor with webpack 4 [PR #2818](https://github.com/microsoft/monaco-editor/pull/2818)\n  - tune(monaco-editor-webpack-plugin): expose plugin options type [PR #2853](https://github.com/microsoft/monaco-editor/pull/2853)\n- [@ZusorCode (Tobias Messner)](https://github.com/ZusorCode): Add .cjs extension for javascript files [PR #2929](https://github.com/microsoft/monaco-editor/pull/2929)\n\n## [0.31.1] (14.12.2021)\n\n- Fixes [a problem with missing colors](https://github.com/microsoft/monaco-editor/issues/2822)\n- Fixes [a problem with scheduling background tokenization](https://github.com/microsoft/vscode/issues/138887)\n- Improves TypeScript's ESM worker.\n\n## [0.31.0] (10.12.2021)\n\n- adds support for [highlighting non basic ASCII, invisible or ambiguous unicode characters](https://code.visualstudio.com/updates/v1_63#_unicode-highlighting).\n- adds support for setting an editor banner\n- streaming hover results in case of multiple hover providers\n- fixes multiple IME issues\n\n### Breaking Changes\n\n- the generated code is now bundled with ESBuild and the generated code makes use of newer browser features, e.g. [optional chaining](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining). These features should be available in all browsers, but they might not be parsed correctly by older JS parsers, specifically parcel v1 might have problems parsing the JS.\n\n### Thank you\n\n- [@activeguild (j1ngzoue)](https://github.com/activeguild): Add 'browser-ems-vite-react' sample [PR #2767](https://github.com/microsoft/monaco-editor/pull/2767)\n- [@emojiiii (C.Y.Kun)](https://github.com/emojiiii): Fix some errors on the website playground [PR #2779](https://github.com/microsoft/monaco-editor/pull/2779)\n- [@gitpaladin (Chen Minglong)](https://github.com/gitpaladin): Fix token while missing `syntax=` directive [PR #2809](https://github.com/microsoft/monaco-editor/pull/2809)\n- [@jonatanklosko (Jonatan Kłosko)](https://github.com/jonatanklosko): Update Elixir tokenization of sigil modifiers [PR #2806](https://github.com/microsoft/monaco-editor/pull/2806)\n- [@MasterOdin (Matthew Peveler)](https://github.com/MasterOdin)\n  - Update builtin functions for mysql [PR #2749](https://github.com/microsoft/monaco-editor/pull/2749)\n  - Update list of keywords for redshift [PR #2757](https://github.com/microsoft/monaco-editor/pull/2757)\n  - Remove return from example addAction [PR #2772](https://github.com/microsoft/monaco-editor/pull/2772)\n- [@milahu](https://github.com/milahu): fix link to monaco.d.ts [PR #2769](https://github.com/microsoft/monaco-editor/pull/2769)\n- [@Pranomvignesh (Pranom Vignesh)](https://github.com/Pranomvignesh): Semantic Tokens Provider Sample is broken in docs [PR #2764](https://github.com/microsoft/monaco-editor/pull/2764)\n- [@rramo012 (Rafael Ramos)](https://github.com/rramo012): Fixing the documentation links [PR #2748](https://github.com/microsoft/monaco-editor/pull/2748)\n\n## [0.30.1] (09.11.2021)\n\n- Fixes [a performance regression where all languages would be loaded when loading the first language](https://github.com/microsoft/monaco-editor/issues/2750).\n\n## [0.30.0] (04.11.2021)\n\n- adds support for rendering horizontal guides between bracket pairs and improves the vertical rendering to account for content in between brackets.\n- adds new `hover.above` option to control the hover position.\n- adds `ICodeEditor.onDidChangeHiddenAreas` which is fired when folding/unfolding.\n- to address [CVE-2021-42574](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2021-42574), the editor now renders Unicode directional formatting characters by default. The special rendering can be turned off using `renderControlCharacters`. See https://code.visualstudio.com/updates/v1_62#_unicode-directional-formatting-characters for an explanation.\n\n### Breaking Changes\n\n- renamed enum members of `monaco.KeyCode` to align with the names given for browser codes.\n- renamed `ITextModel.getModeId()` to `ITextModel.getLanguageId()`\n- renamed `IPasteEvent.mode` to `IPasteEvent.languageId`\n\n### Thank you\n\nContributions to `monaco-editor-webpack-plugin`:\n\n- [@silverwind](https://github.com/silverwind): Fix letter case in repo URL [PR #165](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/165)\n\nContributions to `monaco-languages`:\n\n- [@arlosi (Arlo Siemsen)](https://github.com/arlosi): Rust: highlighting raw strings and fix chars with escapes [PR #167](https://github.com/microsoft/monaco-languages/pull/167)\n- [@MasterOdin (Matthew Peveler)](https://github.com/MasterOdin)\n  - Add new functions in postgresql 14 [PR #168](https://github.com/microsoft/monaco-languages/pull/168)\n  - Update json functions for postgresql [PR #169](https://github.com/microsoft/monaco-languages/pull/169)\n  - Add missing postgresql functions [PR #170](https://github.com/microsoft/monaco-languages/pull/170)\n\n## [0.29.1] (11.10.2021)\n\n- fixes [an issue with the ESM version in DOMPurify](https://github.com/microsoft/monaco-editor/issues/2691).\n\n### Thank you\n\nContributions to `monaco-languages`:\n\n- [@sw23 (Spencer Williams)](https://github.com/sw23)\n  - Adding syntax highlighting support for .pla files (Programmable Logic Array) [PR #163](https://github.com/microsoft/monaco-languages/pull/163)\n  - SystemVerilog: Adding better syntax highlighting for primitive table definitions [PR #165](https://github.com/microsoft/monaco-languages/pull/165)\n- [@tochicool (Tochi Obudulu)](https://github.com/tochicool): Add support for Protocol Buffers language [PR #164](https://github.com/microsoft/monaco-languages/pull/164)\n\n## [0.29.0] (08.10.2021)\n\n- adds an `ariaContainerElement` option for editors\n- adds `guides.bracketPairs` to enable guides driven by bracket pairs\n- adds `maxFileSize` to control the maximum file size for which to compute diffs\n- adds `CodeActionProvider.resolveCodeAction`\n\n### Breaking Change\n\n- consolidated the options `renderIndentGuides`, `highlightActiveIndentGuide` to `guides`\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [@crackalak (Dan Hughes)](https://github.com/crackalak): Added `ariaContainerElement` to shadow dom test [PR #2644](https://github.com/microsoft/monaco-editor/pull/2644)\n- [@HKalbasi](https://github.com/HKalbasi): Add example for inlay hints [PR #2640](https://github.com/microsoft/monaco-editor/pull/2640)\n- [@silverwind](https://github.com/silverwind): Fix letter case in repo URL [PR #2674](https://github.com/microsoft/monaco-editor/pull/2674)\n- [@Un-index](https://github.com/Un-index): chore: Align run button text in playground.css [PR #2658](https://github.com/microsoft/monaco-editor/pull/2658)\n\nContributions to `monaco-editor-samples`:\n\n- [@koto (Krzysztof Kotowicz)](https://github.com/koto): Added an example of loading Monaco with Trusted Types [PR #92](https://github.com/microsoft/monaco-editor-samples/pull/92)\n\nContributions to `monaco-editor-webpack-plugin`:\n\n- [@six-ponies (马騳骉)](https://github.com/six-ponies): fix: Failed to execute 'importScripts' on 'WorkerGlobalScope': The URL xxx is invalid. [PR #160](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/160)\n\nContributions to `monaco-languages`:\n\n- [@aaaaaa2493 (Vladimir Turov)](https://github.com/aaaaaa2493): Support Java 12-17 syntax [PR #159](https://github.com/microsoft/monaco-languages/pull/159)\n- [@mbtools (Marc Bernard)](https://github.com/mbtools): Update ABAP syntax [PR #160](https://github.com/microsoft/monaco-languages/pull/160)\n- [@scarolan (Sean Carolan)](https://github.com/scarolan): Replace // with # for line comments [PR #158](https://github.com/microsoft/monaco-languages/pull/158)\n- [@valeriia-melnychuk (Valeriia Melnychuk)](https://github.com/valeriia-melnychuk): Implement syntax highlighting for Flow9 [PR #154](https://github.com/microsoft/monaco-languages/pull/154)\n\nContributions to `monaco-typescript`:\n\n- [@paranoidjk (paranoidjk)](https://github.com/paranoidjk): feat: support find reference to extraLib [PR #84](https://github.com/microsoft/monaco-typescript/pull/84)\n- [@troy351](https://github.com/troy351): Add type definition of `setInlayHintsOptions` [PR #83](https://github.com/microsoft/monaco-typescript/pull/83)\n\n## [0.28.0] (22.09.2021)\n\n- adds [support for typescript inlay hints](https://github.com/microsoft/monaco-typescript/pull/82). Inlay hints can be enabled like this:\n\n```ts\nmonaco.languages.typescript.typescriptDefaults.setInlayHintsOptions({\n\tincludeInlayParameterNameHints: 'all',\n\tincludeInlayParameterNameHintsWhenArgumentMatchesName: true,\n\tincludeInlayFunctionParameterTypeHints: true,\n\tincludeInlayVariableTypeHints: true,\n\tincludeInlayPropertyDeclarationTypeHints: true,\n\tincludeInlayFunctionLikeReturnTypeHints: true,\n\tincludeInlayEnumMemberValueHints: true\n});\n```\n\n- adds support for bracket pair highlighting, which can be enabled by configuring `bracketPairColorization.enabled` when creating a new editor:\n\n```ts\nvar editor = monaco.editor.create(document.getElementById('container'), {\n\tmodel: model,\n\tlanguage: 'javascript',\n\t'bracketPairColorization.enabled': true\n});\n```\n\n- `registerCodeActionProvider` now accepts metadata to specify provided code action kinds (e.g. `quickfix`, `refactor` or `source`).\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [@SpaceComet](https://github.com/SpaceComet): Small update on the website playground [PR #2616](https://github.com/microsoft/monaco-editor/pull/2616)\n- [@thien-do (Thien Do)](https://github.com/thien-do): Add usage with Vite to ESM Integrate doc [PR #2632](https://github.com/microsoft/monaco-editor/pull/2632)\n\nContributions to `monaco-html`:\n\n- [@Pranomvignesh (Pranom Vignesh)](https://github.com/Pranomvignesh): fix(workerManager.js) : Added a check for the existence of the worker [PR #15](https://github.com/microsoft/monaco-html/pull/15)\n\nContributions to `monaco-languages`:\n\n- [@ladyrick (LadyRick)](https://github.com/ladyrick): fix(cpp): fix cpp language integer suffix [PR #156](https://github.com/microsoft/monaco-languages/pull/156)\n\nContributions to `monaco-typescript`:\n\n- [@Kingwl (Wenlu Wang)](https://github.com/Kingwl): Add inlay hints support [PR #82](https://github.com/microsoft/monaco-typescript/pull/82)\n\n## [0.27.0] (16.08.2021)\n\n- added property `inlineClassName` to style injected text\n- added option `foldingImportsByDefault`\n- added more JSON diagnostic options.\n\n### Breaking Change\n\n- changed `seedSearchStringFromSelection` from boolean to `'never' | 'always' 'selection'`\n- changed suggestion preview mode `subwordDiff` to `subwordSmart`, introduced `subword`\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [@Surm4 (Marcin)](https://github.com/Surm4): Exposed colors sample update in the playground. [PR #2561](https://github.com/microsoft/monaco-editor/pull/2561)\n\nContributions to `monaco-languages`:\n\n- [@alefragnani (Alessandro Fragnani)](https://github.com/alefragnani): Adds `strict` keyword to Pascal language [PR #153](https://github.com/microsoft/monaco-languages/pull/153)\n- [@jonatanklosko (Jonatan Kłosko)](https://github.com/jonatanklosko): Properly tokenize fence closing in GitHub style code blocks [PR #149](https://github.com/microsoft/monaco-languages/pull/149)\n- [@kupiakos (Alyssa Haroldsen)](https://github.com/kupiakos): Remove ' as an auto-closing pair for Rust [PR #151](https://github.com/microsoft/monaco-languages/pull/151)\n- [@lofcz (Matěj Štágl)](https://github.com/lofcz): Fix razor + liquid render of tags with a dash symbol [PR #150](https://github.com/microsoft/monaco-languages/pull/150)\n\n## [0.26.1] (15.07.2021)\n\n- fixes [minimatch dependency issue](https://github.com/microsoft/monaco-editor/issues/2578) by downgrading the monaco-json dependency.\n\n## [0.26.0] (15.07.2021)\n\n- added support for injected text. Use `IModelDecorationOptions.before`/`after`.\n- added support for inlay hints provider.\n\n### Breaking Changes\n\n- CompletionItemLabel now has the property `label`, `detail` and `description` (instead of `name`, `parameters`, `qualifier` and `type`).\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [@anthony-c-martin (Anthony Martin)](https://github.com/anthony-c-martin): Add Bicep sample [PR #2541](https://github.com/microsoft/monaco-editor/pull/2541)\n\nContributions to `monaco-languages`:\n\n- [@anjbur (Angela Burton)](https://github.com/anjbur): Add support for Q# [PR #142](https://github.com/microsoft/monaco-languages/pull/142)\n- [@maxwrlr](https://github.com/maxwrlr): Implement Syntax-Highlighting for SPARQL [PR #145](https://github.com/microsoft/monaco-languages/pull/145)\n- [@nathanrreed (Nathan Reed)](https://github.com/nathanrreed)\n  - fix c++ comment continuation highlighting #2497 [PR #143](https://github.com/microsoft/monaco-languages/pull/143)\n  - fix rust raw string highlighting #2552 [PR #146](https://github.com/microsoft/monaco-languages/pull/146)\n  - fix char literal highlighting #2481 [PR #147](https://github.com/microsoft/monaco-languages/pull/147)\n  - fix rust raw string highlighting #2086 [PR #148](https://github.com/microsoft/monaco-languages/pull/148)\n- [@qwefgh90 (Changwon Choe)](https://github.com/qwefgh90): improve a rule which freeze a page in restructuredText [PR #141](https://github.com/microsoft/monaco-languages/pull/141)\n- [@RubenRBS (Rubén Rincón Blanco)](https://github.com/RubenRBS): Add Swift fileprivate access modifier [PR #144](https://github.com/microsoft/monaco-languages/pull/144)\n\nContributions to `monaco-typescript`:\n\n- [@spahnke (Sebastian Pahnke)](https://github.com/spahnke): Build tag text correctly for all tags [PR #81](https://github.com/microsoft/monaco-typescript/pull/81)\n\n## [0.25.2] (17.06.2021)\n\n- fixes a problem that [certain characters could not be typed on non-US keyboards](https://github.com/microsoft/monaco-editor/issues/2533).\n\n## [0.25.1] (15.06.2021)\n\n- fixes that [`registerHTMLLanguageService` is not available in the AMD version of the monaco-html contribution](https://github.com/microsoft/monaco-editor/issues/2525).\n\n## [0.25.0] (11.06.2021)\n\n- added a new feature `inlineSuggest` that features a provider api and new settings.\n- added `suggest.preview` to toggle previewing the selected suggest item.\n- added `suggest.showDeprecated`\n- CSS/HTML: added support for [custom data format](https://code.visualstudio.com/blogs/2020/02/24/custom-data-format)\n- HTML: added `registerHTMLLanguageService`\n\n### Breaking changes\n\n- renamed `inlineHints` to `inlayHints`.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [@JeanPerriault (El Jùanch0)](https://github.com/JeanPerriault): Fix error message in Safari - Semantic token play [PR #2486](https://github.com/microsoft/monaco-editor/pull/2486)\n- [@jonatanklosko (Jonatan Kłosko)](https://github.com/jonatanklosko): Add Elixir sample [PR #2491](https://github.com/microsoft/monaco-editor/pull/2491)\n\nContributions to `monaco-languages`:\n\n- [@akonatala (apoorva konatala)](https://github.com/akonatala): Update cameligo language support [PR #137](https://github.com/microsoft/monaco-languages/pull/137)\n- [@anark](https://github.com/anark): Add aliases and mimetypes to liquid language [PR #136](https://github.com/microsoft/monaco-languages/pull/136)\n- [@mattvague (Matt Vague)](https://github.com/mattvague): Fix incorrect filenames for liquid [PR #135](https://github.com/microsoft/monaco-languages/pull/135)\n- [@spahnke (Sebastian Pahnke)](https://github.com/spahnke)\n  - [JS/TS] Add support for the RegExp Match Indices flag [PR #139](https://github.com/microsoft/monaco-languages/pull/139)\n  - [TS] Add override keyword [PR #140](https://github.com/microsoft/monaco-languages/pull/140)\n\nContributions to `monaco-typescript`:\n\n- [@paranoidjk (paranoidjk)](https://github.com/paranoidjk): fix: support go to definition for extraLib file [PR #79](https://github.com/microsoft/monaco-typescript/pull/79)\n\n## [0.24.0] (12.05.2021)\n\n- added a setting `domReadOnly` which controls if the `\u003ctextarea\u003e` used for editor input should have the DOM `readonly` attribute\n- added a setting `useShadowDOM` which can be set to `false` to prevent the editor from using shadow DOM in its implementation (e.g. for the contextmenus).\n- added a settings `autoClosingDelete` that controls how backspace works inside auto-closing pairs.\n- added `DiagnosticsOptions.onlyVisible` for TypeScript which limits the computation of diagnostics to only visible text models.\n- fixed issue where the editor would not load in Safari 13.\n\n### Breaking changes\n\n- `EditorAutoClosingOvertypeStrategy` has been renamed to `EditorAutoClosingEditStrategy`\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [@AmyQianqianwang (王倩倩)](https://github.com/AmyQianqianwang): add version compare link for version greater than V0.14.3 [PR #2433](https://github.com/microsoft/monaco-editor/pull/2433)\n\nContributions to `monaco-editor-webpack-plugin`:\n\n- [@k15a (Konstantin Pschera)](https://github.com/k15a): Use compiler.webpack if available [PR #147](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/147)\n- [@sangmokh (Sangmok Han)](https://github.com/sangmokh): Add globalAPI option to expose the editor API through a global monaco object [PR #145](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/145)\n\nContributions to `monaco-languages`:\n\n- [@anthony-c-martin (Anthony Martin)](https://github.com/anthony-c-martin): Add support for Bicep language [PR #132](https://github.com/microsoft/monaco-languages/pull/132)\n- [@jonatanklosko (Jonatan Kłosko)](https://github.com/jonatanklosko): Add Elixir language definition and tokenizer [PR #130](https://github.com/microsoft/monaco-languages/pull/130)\n- [@mattgodbolt (Matt Godbolt)](https://github.com/mattgodbolt): Handle whitespace within C++ preprocessor comments [PR #127](https://github.com/microsoft/monaco-languages/pull/127)\n- [@mattvague (Matt Vague)](https://github.com/mattvague): Add basic language support for Liquid [PR #128](https://github.com/microsoft/monaco-languages/pull/128)\n- [@NullVoxPopuli](https://github.com/NullVoxPopuli): Add hbs alias to handlebars [PR #134](https://github.com/microsoft/monaco-languages/pull/134)\n\nContributions to `monaco-typescript`:\n\n- [@spahnke (Sebastian Pahnke)](https://github.com/spahnke): Deep clone diagnostic objects [PR #76](https://github.com/microsoft/monaco-typescript/pull/76)\n\n## [0.23.0] (05.03.2021)\n\n- improves input on Android (using Gboard)\n- automatically switches to high contrast when the OS is using high contrast (doesn't work in Firefox). Can be turned off via `autoDetectHighContrast`.\n- the editor no longer supports classical Edge, which has reached End of Support on March 9th, 2021. See https://docs.microsoft.com/en-us/lifecycle/faq/internet-explorer-microsoft-edge#what-is-the-lifecycle-policy-for-microsoft-edge\n\n### Thank you\n\nContributions to `monaco-languages`:\n\n- [@Contentmaudlin (Mert Ussakli)](https://github.com/Contentmaudlin): Property is not a keyword in C# [PR #124](https://github.com/microsoft/monaco-languages/pull/124)\n- [@mattgodbolt (Matt Godbolt)](https://github.com/mattgodbolt): Support better C++ annotation highlighting [PR #125](https://github.com/microsoft/monaco-languages/pull/125)\n- [@mwellman17 (Michael Wellman)](https://github.com/mwellman17): Add text/x-yaml MIME type. [PR #126](https://github.com/microsoft/monaco-languages/pull/126)\n\nContributions to `monaco-typescript`:\n\n- [@spahnke (Sebastian Pahnke)](https://github.com/spahnke): Keep fileName property of diagnostic objects and related information [PR #74](https://github.com/microsoft/monaco-typescript/pull/74)\n\n## [0.22.3] (01.02.2021)\n\nFixes a regression where symbol icons used in suggestions or quick outline were missing colors (see https://github.com/microsoft/monaco-editor/issues/2329).\n\n## [0.22.2] (01.02.2021)\n\nFixes a regression where under certain webpack configurations `process.nextTick` could be used without explicitly checking for it being defined (see https://github.com/microsoft/monaco-editor/issues/2328).\n\n## [0.22.1] (29.01.2021)\n\nFixes a regression where format commands would no longer work (see https://github.com/microsoft/monaco-editor/issues/2327).\n\n## [0.22.0] (29.01.2021)\n\n### New \u0026 Noteworthy\n\n- new grammars for Modula-3 and ECL (Enterprise Control Language).\n- added `monaco.editor.onDidChangeMarkers` to listen for marker changes.\n- added `monaco.editor.registerCommand` to register global commands.\n- added `monaco.languages.setColorMap` to allow defining the color map used for tokenization.\n- added `IMonarchLanguage.includeLF` to allow matching against the `\\n` at the end of each line.\n- new editor option `stickyTabStops` to make interacting with spaces in indentation behave more like interacting with tabs.\n\n### Breaking changes\n\n- The ESM version of the editor will no longer define a global `monaco` object. You can define `global.MonacoEnvironment = { globalAPI: true }` if you want for the editor to define this global object.\n- Renamed `OnTypeRenameProvider` to `LinkedEditingRangeProvider` and related methods like the editor option `renameOnType` (now `linkedEditing`), `registerOnTypeRenameProvider` (now `registerLinkedEditingRangeProvider`), etc.\n- Renamed `OnEnterRule.oneLineAboveText` to `OnEnterRule.previousLineText`\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [@Gittenburg](https://github.com/Gittenburg): Fix comment in sample [PR #2161](https://github.com/microsoft/monaco-editor/pull/2161)\n- [@luminaxster (David Gonzalez)](https://github.com/luminaxster): Missing breaking change [PR #2186](https://github.com/microsoft/monaco-editor/pull/2186)\n- [@svick (Petr Onderka)](https://github.com/svick): Fixed indentation in C# sample [PR #2250](https://github.com/microsoft/monaco-editor/pull/2250)\n\nContributions to `monaco-languages`:\n\n- [@arlosi (Arlo Siemsen)](https://github.com/arlosi): Rust: add support for keywords from the 2018 edition [PR #123](https://github.com/microsoft/monaco-languages/pull/123)\n- [@dehilsterlexis (David de Hilster)](https://github.com/dehilsterlexis): LEXER-ECL-001 Lexer for ECL (Enterprise Control Language) [PR #118](https://github.com/microsoft/monaco-languages/pull/118)\n- [@fonsecas72 (Hugo Fonseca)](https://github.com/fonsecas72): terraform Fix heredoc [PR #116](https://github.com/microsoft/monaco-languages/pull/116)\n- [@jcchu](https://github.com/jcchu): Add Modula-3 support [PR #117](https://github.com/microsoft/monaco-languages/pull/117)\n- [@maclockard (Mac Lockard)](https://github.com/maclockard): Fix highlighting of GROUP BY for redshift [PR #122](https://github.com/microsoft/monaco-languages/pull/122)\n- [@philipsens (Sergi Philipsen)](https://github.com/philipsens): Add auto indent for xml [PR #113](https://github.com/microsoft/monaco-languages/pull/113)\n- [@stla](https://github.com/stla)\n  - completed the list of roxygen tags [PR #114](https://github.com/microsoft/monaco-languages/pull/114)\n  - removed white spaces in constants [PR #115](https://github.com/microsoft/monaco-languages/pull/115)\n- [@VarghaSabee (Sabolch Varha)](https://github.com/VarghaSabee): Safari regex error fix (negative lookbehind) #2179 [PR #121](https://github.com/microsoft/monaco-languages/pull/121)\n\nContributions to `monaco-typescript`:\n\n- [@Kingwl (Wenlu Wang)](https://github.com/Kingwl): Add new jsx emit option [PR #73](https://github.com/microsoft/monaco-typescript/pull/73)\n\nContributions to `monaco-css`:\n\n- [@jpett](https://github.com/jpett): Fix error Cannot read property 'getModeId' of null [PR #10](https://github.com/microsoft/monaco-css/pull/10)\n\n## [0.21.3] (18.01.2021)\n\nFixes a regression in suggestions where the browser clipboard API would be accessed by incomplete suggestion lists (see https://github.com/microsoft/vscode/commit/96d61842bae1e5dd11f9ff6139fad9e3e5141401).\n\n## [0.21.2] (27.09.2020)\n\nFixes [a regression in monaco-css](https://github.com/microsoft/monaco-editor/issues/2158).\n\n### Breaking changes\n\n- `monaco.uri` methods `file, from, isUri, joinPath, parse, revive` are now static. Changing `new monaco.uri.method` to `monaco.uri.method` resolves 'TypeError: monaco.Uri.file is not a constructor at...' errors.\n\n## [0.21.1] (24.09.2020)\n\nFixes [a few regressions](https://github.com/microsoft/monaco-editor/issues?q=is%3Aissue+milestone%3A%22August+2020+%282%29%22+is%3Aclosed).\n\n### Thank you\n\nContributions to `monaco-html`:\n\n- [Pankaj Khandelwal (@pankajk07)](https://github.com/pankajk07): Fixes microsoft/monaco-editor#2101 [PR #12](https://github.com/microsoft/monaco-html/pull/12)\n\nContributions to `monaco-languages`:\n\n- [Marc Bernard (@mbtools)](https://github.com/mbtools): Overhaul of ABAP language based on release 7.54 [PR #112](https://github.com/microsoft/monaco-languages/pull/112)\n\nContributions to `monaco-typescript`:\n\n- [PG Herveou (@pgherveou)](https://github.com/pgherveou): Add missing setWorkerOptions [PR #71](https://github.com/microsoft/monaco-typescript/pull/71)\n\n## [0.21.0] (21.09.2020)\n\n### New \u0026 Noteworthy\n\n- Added `Paste` in the context menu in browsers which support the clipboard API.\n- Many improvements in `monaco-typescript`: support for \"deprecated\" tags, API to participate in the web worker, improved lib.d.ts resolving.\n- New tokenization support for: Julia, Scala, Lexon, Terraform HCL, Dart, Systemverilog.\n- New semantic tokens provider [sample on the playground](https://microsoft.github.io/monaco-editor/playground.html#extending-language-services-semantic-tokens-provider-example).\n- New [shadow dom sample](https://github.com/microsoft/monaco-editor-samples/tree/master/browser-amd-shadow-dom)\n- New `overflowWidgetsDomNode` constructor option to pass in a parent for overflowing widgets.\n- New `minimap.size` option: `proportional`, `fill`, `fit`.\n- New `OnTypeRename` provider and option `renameOnType`.\n- Fixed issue where cross-origin web workers were not working on Safari.\n- Fixed many issues around embedding the editor in iframes or in shadow dom.\n- Fixed issue with `automaticLayout`.\n- Fixed issue with scrolling speed on Firefox.\n- New options: `tabIndex`, `scrollPredominantAxis`, `columnSelection`, `padding`, `unfoldOnClickAfterEndOfLine`, `renderLineHighlightOnlyWhenFocus`, `definitionLinkOpensInPeek`, `showDeprecated`, `comments.ignoreEmptyLines`, `find.cursorMoveOnType`, `find.loop`.\n- New diff editor options: `originalCodeLens`, `modifiedCodeLens`.\n- Changed options: `rulers` can now define different colors, `renderWhitespace` can now be `trailing`.\n\n### Breaking changes\n\n- `CompletionItemLabel.signature` has been renamed to `CompletionItemLabel.parameters`.\n- The signature of `CompletionItemProvider.resolveCompletionItem` has changed.\n- `IMarker.code.link` was renamed to `IMarker.code.target`.\n- `IMarkerData.code.link` was renamed to `IMarkerData.code.target`.\n- `EditorLayoutInfo` has been restructured.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [Hugo Fonseca (@fonsecas72)](https://github.com/fonsecas72): Adding terraform / hcl samples [PR #2102](https://github.com/microsoft/monaco-editor/pull/2102)\n- [@KapitanOczywisty](https://github.com/KapitanOczywisty)\n  - Update example: allow peek definition [PR #2112](https://github.com/microsoft/monaco-editor/pull/2112)\n  - Semantic tokens provider example [PR #2103](https://github.com/microsoft/monaco-editor/pull/2103)\n- [Tuan Le Minh (@minhtuanchannhan)](https://github.com/minhtuanchannhan): Correct url of Microsoft logo [PR #2132](https://github.com/microsoft/monaco-editor/pull/2132)\n- [Max Schmitt (@mxschmitt)](https://github.com/mxschmitt): ci: fixed smoke tests by increasing timeout [PR #1964](https://github.com/microsoft/monaco-editor/pull/1964)\n- [Nicholas Rayburn (@nrayburn-tech)](https://github.com/nrayburn-tech): Monarch documentation changes [PR #1844](https://github.com/microsoft/monaco-editor/pull/1844)\n- [ZHAO Jinxiang (@xiaoxiangmoe)](https://github.com/xiaoxiangmoe): fix: A 'declare' modifier cannot be used in an already ambient context [PR #2121](https://github.com/microsoft/monaco-editor/pull/2121)\n\nContributions to `monaco-typescript`:\n\n- [Sebastian Pahnke (@spahnke)](https://github.com/spahnke)\n  - Adopt \"deprecated\" API [PR #67](https://github.com/microsoft/monaco-typescript/pull/67)\n  - Format signature and parameter documentation as Markdown [PR #66](https://github.com/microsoft/monaco-typescript/pull/66)\n- [Spencer (@SpencerSharkey)](https://github.com/SpencerSharkey): Use typescript language for hover tooltip header [PR #70](https://github.com/microsoft/monaco-typescript/pull/70)\n\nContributions to `monaco-json`:\n\n- [@pankajk07](https://github.com/pankajk07): Fixes microsoft/monaco-editor#1999 [PR #12](https://github.com/microsoft/monaco-json/pull/12)\n\nContributions to `monaco-languages`:\n\n- [theangryepicbanana (@ALANVF)](https://github.com/ALANVF)\n  - Add support for Julia [PR #82](https://github.com/microsoft/monaco-languages/pull/82)\n  - Add Scala support [PR #98](https://github.com/microsoft/monaco-languages/pull/98)\n- [Arjan van Eersel (@arjanvaneersel)](https://github.com/arjanvaneersel): Implemented Lexon highlighting [PR #86](https://github.com/microsoft/monaco-languages/pull/86)\n- [Basarat Ali Syed (@basarat)](https://github.com/basarat): add .mjs support :rose: [PR #92](https://github.com/microsoft/monaco-languages/pull/92)\n- [@bolinfest](https://github.com/bolinfest): Update Python grammar to include keywords introduced in Python 3 [PR #91](https://github.com/microsoft/monaco-languages/pull/91)\n- [Hugo Fonseca (@fonsecas72)](https://github.com/fonsecas72)\n  - Adding Gemfile to ruby filenames [PR #111](https://github.com/microsoft/monaco-languages/pull/111)\n  - Adding hcl / terraform language [PR #109](https://github.com/microsoft/monaco-languages/pull/109)\n  - Terraform HCL : Fixing, Improving, adding tests [PR #110](https://github.com/microsoft/monaco-languages/pull/110)\n- [Lars Hvam (@larshp)](https://github.com/larshp)\n  - Mocha, fix deprecation warning regarding mocha.opts [PR #88](https://github.com/microsoft/monaco-languages/pull/88)\n  - [ABAP] Language fixes [PR #87](https://github.com/microsoft/monaco-languages/pull/87)\n- [Kenny Lin (@LinKCoding)](https://github.com/LinKCoding): Added \".rmd\" file extension to R's list of supported languages [PR #83](https://github.com/microsoft/monaco-languages/pull/83)\n- [Justin Mancusi (@mancusi)](https://github.com/mancusi): Updates the comment tokenization for handlebars syntax. [PR #93](https://github.com/microsoft/monaco-languages/pull/93)\n- [Mert Caliskan (@mulderbaba)](https://github.com/mulderbaba): introduce preliminary Scala support, highly inspired by src/java content [PR #97](https://github.com/microsoft/monaco-languages/pull/97)\n- [Nicholas Rayburn (@nrayburn-tech)](https://github.com/nrayburn-tech): Add \\_ as a supported character for Python tags/keywords [PR #81](https://github.com/microsoft/monaco-languages/pull/81)\n- [@skacurt](https://github.com/skacurt): [vb] fix string literals [PR #94](https://github.com/microsoft/monaco-languages/pull/94)\n- [Taymon A. Beal (@taymonbeal)](https://github.com/taymonbeal): Add asserts, bigint, and unknown to TypeScript keywords [PR #96](https://github.com/microsoft/monaco-languages/pull/96)\n- [Sabolch Varha (@VarghaSabee)](https://github.com/VarghaSabee): Feature - dart language support [PR #84](https://github.com/microsoft/monaco-languages/pull/84)\n- [@xadegunt](https://github.com/xadegunt): Add Systemverilog language support [PR #108](https://github.com/microsoft/monaco-languages/pull/108)\n\n## [0.20.0] (11.02.2020)\n\n### New \u0026 Noteworthy\n\n- The editor can now be hosted inside a Shadow Root.\n- There is new API to read the editor's content width and height.\n- New editor options:\n  - `renderValidationDecorations` - render validation decorations even in read only editors\n  - `wrappingStrategy` - delegate wrapping points computation to the browser\n  - `comments.insertSpace` - insert a space around comments when running commenting commands\n  - `foldingHighlight` - highlight folded regions\n  - `peekWidgetDefaultFocus` - focus the inline editor or the tree when opening peek view\n\n### Breaking changes\n\n- Renamed `onCompositionStart`, `onCompositionEnd` to `onDidCompositionStart`, `onDidCompositionEnd`\n- Changed the argument passed in to `onDidPaste`\n- `WorkspaceEdit.edits` has now changed its shape such that edits must no longer be grouped by resource.\n- The Monaco Editor no longer supports IE 11. The last version that was tested in IE 11 is 0.18.1.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [Josh Goldberg (@JoshuaKGoldberg)](https://github.com/JoshuaKGoldberg): Added section in Monarch docs for Inspect Tokens development helper [PR #1807](https://github.com/microsoft/monaco-editor/pull/1807)\n\nContributions to `monaco-typescript`:\n\n- [Elizabeth Craig (@ecraig12345)](https://github.com/ecraig12345): Add types for TypeScriptWorker and missing LanguageServiceDefaults methods [PR #54](https://github.com/microsoft/monaco-typescript/pull/54)\n\nContributions to `monaco-languages`:\n\n- [alan.invents (@ALANVF)](https://github.com/ALANVF): Highlight function definitions better [PR #79](https://github.com/microsoft/monaco-languages/pull/79)\n- [@nrayburn-tech](https://github.com/nrayburn-tech): Add support for multiline comments in Swift [PR #80](https://github.com/microsoft/monaco-languages/pull/80)\n\n## [0.19.3] (14.01.2020)\n\n- brings back a way to get resolved editor options - [#1734](https://github.com/microsoft/monaco-editor/issues/1734)\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [Brijesh Bittu (@brijeshb42)](https://github.com/brijeshb42): Playground: Add keyboard shortcut to run playground code [PR #1756](https://github.com/microsoft/monaco-editor/pull/1756)\n\nContributions to `monaco-languages`:\n\n- [Rikki Schulte (@acao)](https://github.com/acao): add tokenizer for graphql language variables [PR #78](https://github.com/microsoft/monaco-languages/pull/78)\n\n## [0.19.2] (06.01.2020)\n\n- fixes issue with default value of `autoIndent` - [#1726](https://github.com/microsoft/monaco-editor/issues/1726)\n\n## [0.19.1] (06.01.2020)\n\n- fixes issue with .d.ts file in the ESM distribution - [#1729](https://github.com/microsoft/monaco-editor/issues/1729)\n- adds types for global editor options (such as `wordBasedSuggestions`) - [#1746](https://github.com/microsoft/monaco-editor/issues/1746)\n- adds support for reStructuredText.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [Lars Hvam (@larshp)](https://github.com/larshp)\n  - Playground: add ABAP sample [PR #1737](https://github.com/microsoft/monaco-editor/pull/1737)\n  - Playground: fix codelens provider example [PR #1738](https://github.com/microsoft/monaco-editor/pull/1738)\n\nContributions to `monaco-languages`:\n\n- [Changwon Choe (@qwefgh90)](https://github.com/qwefgh90): add support for reStructuredText [PR #77](https://github.com/microsoft/monaco-languages/pull/77)\n\n## [0.19.0] (20.12.2019)\n\n### New \u0026 Noteworthy\n\n- It is now possible to pass in a `dimension` in the editor construction options in order to avoid a synchronous layout.\n- There is new API to provide semantic tokens.\n- New options:\n  - `multiCursorPaste`: define how to distribute paste in case of multi-cursor\n  - `matchBrackets`: control if enclosing brackets should be highlighted\n- Fixes for tokenization in: TypeScript, JavaScript, Handlebars, Kotlin and VB.\n\n### Breaking changes\n\n- `getConfiguration()` is replaced by `getRawOptions()`, which returns the passed in editor options.\n- Starting with this version, the Monaco Editor no longer supports IE 11. The last version that was tested in IE 11 is 0.18.1.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [Lars Hvam (@larshp)](https://github.com/larshp)\n  - contributing: add details for running website locally [PR #1617](https://github.com/microsoft/monaco-editor/pull/1617)\n  - playground: update symbols-provider-example [PR #1616](https://github.com/microsoft/monaco-editor/pull/1616)\n- [Remy Suen (@rcjsuen)](https://github.com/rcjsuen): Add CompletionItem with snippet support to the example [PR #1703](https://github.com/microsoft/monaco-editor/pull/1703)\n\nContributions to `monaco-editor-webpack-plugin`:\n\n- [Dominik Moritz (@domoritz)](https://github.com/domoritz): Bump to 0.16 [PR #62](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/62)\n- [Mike Greiling (@mikegreiling)](https://github.com/mikegreiling): Fix **webpack_public_path** within getWorkerUrl method [PR #63](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/63)\n- [Roman Krasiuk (@rkrasiuk)](https://github.com/rkrasiuk): Bump to 0.17.0 and Add graphql support [PR #67](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/67)\n- [Niklas Mollenhauer (@nikeee)](https://github.com/nikeee): Add loader-utils and make @types/webpack a dev dependency [PR #74](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/74)\n- [James Diefenderfer (@jimmydief)](https://github.com/jimmydief)\n  - Add support for plugin-specific public path [PR #81](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/81)\n  - Add support for dynamic filenames [PR #83](https://github.com/microsoft/monaco-editor-webpack-plugin/pull/83)\n\nContributions to `monaco-languages`:\n\n- [Maksym Bykovskyy (@mbykovskyy)](https://github.com/mbykovskyy): Adds cameligo language support [PR #75](https://github.com/microsoft/monaco-languages/pull/75)\n- [Steven Degutis (@sdegutis)](https://github.com/sdegutis): Adds Markdown Table syntax highlighting [PR #73](https://github.com/microsoft/monaco-languages/pull/73)\n- [Sergey Romanov (@Serhioromano)](https://github.com/Serhioromano): Improvements to ST language [PR #76](https://github.com/microsoft/monaco-languages/pull/76)\n- [Sebastian Pahnke (@spahnke)](https://github.com/spahnke): [JS/TS] Add support for the nullish-coalesce operator [PR #74](https://github.com/microsoft/monaco-languages/pull/74)\n\nContributions to `monaco-typescript`:\n\n- [Denys Vuika (@DenysVuika)](https://github.com/DenysVuika): register multiple extra libs at once [PR #24](https://github.com/microsoft/monaco-typescript/pull/24)\n- [Elizabeth Craig (@ecraig12345)](https://github.com/ecraig12345)\n  - Generate and publish typings for package [PR #50](https://github.com/microsoft/monaco-typescript/pull/50)\n  - Remove another require call [PR #49](https://github.com/microsoft/monaco-typescript/pull/49)\n- [@katis](https://github.com/katis): Update TypeScript to 3.7.2 [PR #51](https://github.com/microsoft/monaco-typescript/pull/51)\n- [Tamas Kiss (@kisstkondoros)](https://github.com/kisstkondoros): Add documentation to signature help [PR #52](https://github.com/microsoft/monaco-typescript/pull/52)\n- [Lars Hvam (@larshp)](https://github.com/larshp): fix typo [PR #45](https://github.com/microsoft/monaco-typescript/pull/45)\n- [Sebastian Pahnke (@spahnke)](https://github.com/spahnke)\n  - Provide related information to diagnostics [PR #48](https://github.com/microsoft/monaco-typescript/pull/48)\n- [Alessandro Fragnani (@alefragnani)](https://github.com/alefragnani): Add Pascal samples [PR #1358](https://github.com/microsoft/monaco-editor/pull/1358)\n  - Adopt monaco.MarkerTag API [PR #47](https://github.com/microsoft/monaco-typescript/pull/47)\n  - Add support to ignore certain diagnostics [PR #46](https://github.com/microsoft/monaco-typescript/pull/46)\n\n## [0.18.1] (19.09.2019)\n\n- fixes 2 issues with the ESM distribution - [#1572](https://github.com/microsoft/monaco-editor/issues/1572) and [#1574](https://github.com/microsoft/monaco-editor/issues/1574)\n- fixes very slow scrolling in Firefox - [#1575](https://github.com/microsoft/monaco-editor/issues/1575)\n- new syntax highlighting for: pascaligo, ABAP, Sophia ML, Twig and MIPS.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [Alessandro Fragnani (@alefragnani)](https://github.com/alefragnani): Add Pascal samples [PR #1358](https://github.com/microsoft/monaco-editor/pull/1358)\n- [Daniel Wang (@datou0412)](https://github.com/datou0412): Add koltin sample for website [PR #1351](https://github.com/microsoft/monaco-editor/pull/1351)\n- [Ehsan (@ehsan-mohammadi)](https://github.com/ehsan-mohammadi): Updated html sample code [PR #1387](https://github.com/microsoft/monaco-editor/pull/1387)\n- [Jonas Fonseca (@jonas)](https://github.com/jonas): CHANGELOG: Fix year for releases made in 2019 [PR #1388](https://github.com/microsoft/monaco-editor/pull/1388)\n- [Milen Radkov (@mradkov)](https://github.com/mradkov): Add Sophia ML example [PR #1543](https://github.com/microsoft/monaco-editor/pull/1543)\n- [Sergey Romanov (@Serhioromano)](https://github.com/Serhioromano): Structured text example [PR #1552](https://github.com/microsoft/monaco-editor/pull/1552)\n- [zhnlviing (@zhanghongnian)](https://github.com/zhanghongnian): fix demo: completion provider example [PR #1537](https://github.com/microsoft/monaco-editor/pull/1537)\n\nContributions to `monaco-json`:\n\n- [Dominik Moritz (@domoritz)](https://github.com/domoritz)\n  - Upgrade dependencies [PR #11](https://github.com/microsoft/monaco-json/pull/11)\n  - Add config to disable default formatter [PR #10](https://github.com/microsoft/monaco-json/pull/10)\n\nContributions to `monaco-languages`:\n\n- [Brice Aldrich (@DefinitelyNotAGoat)](https://github.com/DefinitelyNotAGoat): pascaligo: adding pascaligo language support [PR #69](https://github.com/microsoft/monaco-languages/pull/69)\n- [Salam Elbilig (@finalfantasia)](https://github.com/finalfantasia): [clojure] treat comma as whitespace [PR #63](https://github.com/microsoft/monaco-languages/pull/63)\n- [Alf Eaton (@hubgit)](https://github.com/hubgit): [xml] Add OPF and XSL file extensions [PR #64](https://github.com/microsoft/monaco-languages/pull/64)\n- [Lars Hvam (@larshp)](https://github.com/larshp)\n  - [ABAP] Add ABAP language support [PR #72](https://github.com/microsoft/monaco-languages/pull/72)\n  - readme: align \"add new language\" example [PR #70](https://github.com/microsoft/monaco-languages/pull/70)\n- [Milen Radkov (@mradkov)](https://github.com/mradkov)\n  - Add support for Sophia ML [PR #67](https://github.com/microsoft/monaco-languages/pull/67)\n  - add `None` and `Some` keywords to SophiaML [PR #68](https://github.com/microsoft/monaco-languages/pull/68)\n- [Marco Petersen (@ocrampete16)](https://github.com/ocrampete16): Add support for the Twig template language [PR #71](https://github.com/microsoft/monaco-languages/pull/71)\n- [Progyan Bhattacharya (@Progyan1997)](https://github.com/Progyan1997): [Feat] MIPS: Support for Syntax Highlight and Basic Colorization [PR #65](https://github.com/microsoft/monaco-languages/pull/65)\n- [Sergey Romanov (@Serhioromano)](https://github.com/Serhioromano): [ST] Some updated for Structured Text Language support [PR #66](https://github.com/microsoft/monaco-languages/pull/66)\n- [Sebastian Pahnke (@spahnke)](https://github.com/spahnke): [JS/TS] Add support for BigInt [PR #62](https://github.com/microsoft/monaco-languages/pull/62)\n\nContributions to `monaco-typescript`:\n\n- [Andre Wachsmuth (@blutorange)](https://github.com/blutorange): Fix microsoft/monaco-editor#1576 update dependency to core [PR #41](https://github.com/microsoft/monaco-typescript/pull/41)\n- [Javey (@Javey)](https://github.com/Javey): Make it can be compressed by uglify-js [PR #34](https://github.com/microsoft/monaco-typescript/pull/34)\n- [Sebastian Pahnke (@spahnke)](https://github.com/spahnke): Add a rename provider [PR #39](https://github.com/microsoft/monaco-typescript/pull/39)\n- [@ulrichb](https://github.com/ulrichb): Expose TypeScript version via `monaco.languages.typescript.typeScriptVersion` [PR #31](https://github.com/microsoft/monaco-typescript/pull/31)\n\n## [0.18.0] (04.09.2019)\n\n### New \u0026 Noteworthy\n\n- Minimap enhancement\n  - Selections and find results are now rendered in the minimap.\n  - Model decorations now support `IModelDecorationOptions.minimap`, once set the decoration will be rendered in the minimap\n- New editor options\n  - `autoClosingOvertype`: it controls whether the editor allows [typing over closing quotes or brackets](https://github.com/microsoft/vscode/issues/37315#issuecomment-515200477).\n  - `cursorSurroundingLines`: it controls how many visible lines to display around the cursor while moving the cursor towards beginning or end of a file.\n  - `renderWhitespace: \"selection\"`: the editor can render whitespaces only in selection.\n\n### API changes\n\n- `DeclarationProvider`: The declaration provider interface defines the contract between extensions and the go to declaration feature.\n- `SelectionRangeProvider` Provide smart selection ranges for the given positions, see VS Code [issue](https://github.com/microsoft/vscode/issues/67872).\n- CodeLensProvider should now return `CodeLensList` instead of `ICodeLensSymbol[]`.\n- `DocumentSymbol` has a new property `tags` to support more types.\n- View Zone id is now `string` instead of `number`.\n\n### Thank you\n\nContributions to `monaco-json`:\n\n- [Ԝеѕ @wesinator](https://github.com/wesinator): Add .har extension [#9](https://github.com/microsoft/monaco-json/pull/9)\n\n## [0.17.1] (25.06.2019)\n\n- Update monaco-typescript to TypeScript 3.5.0.\n\n## [0.17.0] (05.05.2019)\n\n### New \u0026 Noteworthy\n\n- Localization support is brought back for AMD bundle. We lost the localization support when VS Code moved to the localization system but now AMD bundles ships the same localized strings VS Code localization extensions ship. For more details, please read [Monaco#822](https://github.com/Microsoft/monaco-editor/issues/822) and related [VS Code upstream issue](https://github.com/Microsoft/vscode/issues/71065)\n- `LinkProvider.ProvideLinks` should now return `ILinksList` instead of `ILink[]`.\n- `IEditorOptions.iconsInSuggestions` and `EditorContribOptions.iconsInSuggestions` are now replaced by `EditorContribOptions.suggest.showIcons`.\n- We introduced `EditorContribOptions.suggest.maxVisibleSuggestions` to control maximum suggestions to show in suggestions widget.\n- `EditorContribOptions.suggest.filteredTypes` is now introduced to allow suggestions to be filtered by the user. For more details, please read [vscode#45039](https://github.com/Microsoft/vscode/issues/45039).\n\n### Thank You\n\nContributions to `monaco-editor`:\n\n- [Jonas Fonseca @jonas](https://github.com/jonas): Fix year for releases made in 2019 [PR #1388](https://github.com/Microsoft/monaco-editor/pull/1388)\n\n## [0.16.2] (19.03.2019)\n\n- Fixes for HTML and JSON (https://github.com/Microsoft/monaco-editor/issues/1367, https://github.com/Microsoft/monaco-editor/issues/1254)\n\n## [0.16.1] (14.03.2019)\n\n- Fixes issue with context menu (https://github.com/Microsoft/monaco-editor/issues/1357)\n\n## [0.16.0] (05.03.2019)\n\n### New \u0026 Noteworthy\n\n- Added built-in support for AMD cross-domain web worker loading.\n- Added API to remeasure fonts (`monaco.editor.remeasureFonts`) in case custom fonts are used and the editor is painted at a time when the fonts are not finished loading.\n- Various editor improvements, such as an option to `renderFinalNewline`, or to have a `cursorSmoothCaretAnimation`\n- Colorization support for Tcl, Pascal, Kotlin and GraphQL.\n\n### Breaking changes\n\n- We are no longer shipping WinJS.Promise, but we are shipping with a Promise shim (for IE11).\n- `CompletionItem.range` is now mandatory. Most times, you can use `model.getWordUntilPosition()` to get a good range.\n- `DefinitionLink` has been renamed to `LocationLink` and a couple of its fields have also been renamed.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [Sebastián Gurin (@cancerberoSgx)](https://github.com/cancerberoSgx): fix worker paths in parcel [PR #1339](https://github.com/Microsoft/monaco-editor/pull/1339)\n- [@datou0412](https://github.com/datou0412): Fix lineDecoration example css error [PR #1337](https://github.com/Microsoft/monaco-editor/pull/1337)\n- [Joshua Sullivan (@jbsulli)](https://github.com/jbsulli): Fix JavaScript RegExp range closing bracket [PR #1329](https://github.com/Microsoft/monaco-editor/pull/1329)\n- [Krish De Souza (@Kedstar99)](https://github.com/Kedstar99): Fixed various HTML errors with the various webpages [PR #1309](https://github.com/Microsoft/monaco-editor/pull/1309)\n- [Swarnava Sengupta (@swarnava)](https://github.com/swarnava): Make copyright year dynamic [PR #1303](https://github.com/Microsoft/monaco-editor/pull/1303)\n\nContributions to `monaco-languages`:\n\n- [alan.invents (@ALANVF)](https://github.com/ALANVF): Add Tcl support [PR #59](https://github.com/Microsoft/monaco-languages/pull/59)\n- [Alessandro Fragnani (@alefragnani)](https://github.com/alefragnani): Pascal language support [PR #60](https://github.com/Microsoft/monaco-languages/pull/60)\n- [Brijesh Bittu (@brijeshb42)](https://github.com/brijeshb42): Update ruby auto indentation rules [PR #58](https://github.com/Microsoft/monaco-languages/pull/58)\n- [Andrew (@creativedrewy)](https://github.com/creativedrewy): Add Kotlin Language Support [PR #57](https://github.com/Microsoft/monaco-languages/pull/57)\n- [Salam Elbilig (@finalfantasia)](https://github.com/finalfantasia): [clojure] Improve the regular expressions for various symbols [PR #56](https://github.com/Microsoft/monaco-languages/pull/56)\n- [Neil Jones (@futurejones)](https://github.com/futurejones): Solidity - add \"constructor\" to main keywords [PR #55](https://github.com/Microsoft/monaco-languages/pull/55)\n- [Pavel Lang (@langpavel)](https://github.com/langpavel): GraphQL language support [PR #54](https://github.com/Microsoft/monaco-languages/pull/54)\n- [Samuel Helms (@samghelms)](https://github.com/samghelms): allows annotation in markdown language block headers [PR #61](https://github.com/Microsoft/monaco-languages/pull/61)\n\nContributions to `monaco-typescript`:\n\n- [Olga Lesnikova (@Geloosa)](https://github.com/Geloosa): more safe extra lib filePath generation [PR #29](https://github.com/Microsoft/monaco-typescript/pull/29)\n- [Stefan Lacatus (@stefan-lacatus)](https://github.com/stefan-lacatus): Optimize how external libs are handled and allow for custom languages [PR #30](https://github.com/Microsoft/monaco-typescript/pull/30)\n\n## [0.15.6] (23.11.2018)\n\n- Fixes issue with context menu (https://github.com/Microsoft/monaco-editor/issues/1199)\n\n## [0.15.5] (16.11.2018)\n\n- Re-remove cast to any from our code base to allow for tree shaking to not shake useful code (https://github.com/Microsoft/monaco-editor/issues/1013)\n\n## [0.15.4] (15.11.2018)\n\n- Fixes context menu in IE11 - https://github.com/Microsoft/monaco-editor/issues/1191\n- Fixes suggest widget - https://github.com/Microsoft/monaco-editor/issues/1185 and https://github.com/Microsoft/monaco-editor/issues/1186\n\n## [0.15.3] (15.11.2018)\n\n- Remove cast to any from our code base to allow for tree shaking to not shake useful code (https://github.com/Microsoft/monaco-editor/issues/1013)\n\n## [0.15.2] (14.11.2018)\n\n- Fixes usage of `marked` to allow for packaging with rollup (https://github.com/Microsoft/monaco-editor/issues/1183)\n\n## [0.15.1] (13.11.2018)\n\n- Fixes the `/esm/` distribution (https://github.com/Microsoft/monaco-editor/issues/1178)\n\n## [0.15.0] (12.11.2018)\n\n### New \u0026 Noteworthy\n\n- Improved typings in `monaco.d.ts` to better reflect null types.\n\n### Breaking changes\n\n- We are slowly migrating our code-base away from WinJS promises, so the exposed `monaco.Promise` API has been reduced to indicate that. We are setting up a Promise polyfill to cover browsers which do not have a native Promise implementation yet (i.e. IE11).\n- `CompletionItemProvider.provideCompletionItems` and `CompletionItemProvider.resolveCompletionItem` have been modified to better reflect the API of VS Code. Both arguments and return type have changed.\n- `SignatureHelpProvider.provideSignatureHelp` now receives an extra argument for the context.\n- Various new editor options or tweaks to existing ones: `parameterHints`, `autoClosingBrackets`, `autoClosingQuotes`, `autoSurround`, `copyWithSyntaxHighlighting`, `tabCompletion`.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [Arvind S (@arvind0598)](https://github.com/arvind0598): Updated C# sample code for a simpler game. [PR #1160](https://github.com/Microsoft/monaco-editor/pull/1160)\n- [Brooks Becton (@brooksbecton)](https://github.com/brooksbecton): Removing obsolete Note in Monarch Docs [PR #1089](https://github.com/Microsoft/monaco-editor/pull/1089)\n- [James Orr (@buzzcola)](https://github.com/buzzcola): Correct comma splice in README.md [PR #1111](https://github.com/Microsoft/monaco-editor/pull/1111)\n- [Chintogtokh Batbold (@chintogtokh)](https://github.com/chintogtokh): Clarify that repo doesn't contain source code [PR #1119](https://github.com/Microsoft/monaco-editor/pull/1119)\n- [Chris Helgert (@chrishelgert)](https://github.com/chrishelgert): Move issue template to '.github' folder and add some styling for better readability [PR #1121](https://github.com/Microsoft/monaco-editor/pull/1121)\n- [Steven Bock (@dabockster)](https://github.com/dabockster): Added better Java sample (FizzBuzz instead of JUnit) [PR #1161](https://github.com/Microsoft/monaco-editor/pull/1161)\n- [Michele Gobbi (@dynamick)](https://github.com/dynamick): Added Ruby [PR #1102](https://github.com/Microsoft/monaco-editor/pull/1102)\n- [Edilson Ngulele (@EdNgulele)](https://github.com/EdNgulele): style: Updated CONTRIBUTING.md [PR #1088](https://github.com/Microsoft/monaco-editor/pull/1088)\n- [Evan Walters (@evanwaltersdev)](https://github.com/evanwaltersdev): issue guidelines [PR #1096](https://github.com/Microsoft/monaco-editor/pull/1096)\n- [Abdussalam Abdurrahman (@finalfantasia)](https://github.com/finalfantasia): [clojure] Update Clojure example with one that's more representative. [PR #1059](https://github.com/Microsoft/monaco-editor/pull/1059)\n- [@flash76](https://github.com/flash76): Update README.md [PR #1141](https://github.com/Microsoft/monaco-editor/pull/1141)\n- [Daniel Pasch (@gempir)](https://github.com/gempir): fix 2 of 7 npm package vurnerabilities [PR #1087](https://github.com/Microsoft/monaco-editor/pull/1087)\n- [@Hotlar](https://github.com/Hotlar): lingual fixes to readme [PR #1086](https://github.com/Microsoft/monaco-editor/pull/1086)\n- [Jeremy Meiss (@jerdog)](https://github.com/jerdog): correct README grammar [PR #1114](https://github.com/Microsoft/monaco-editor/pull/1114)\n- [Joaquim Honório (@JoaquimCMH)](https://github.com/JoaquimCMH): Update CHANGELOG [PR #1152](https://github.com/Microsoft/monaco-editor/pull/1152)\n- [Ricardo Ambrogi (@KadoBOT)](https://github.com/KadoBOT): Remove commented code [PR #1113](https://github.com/Microsoft/monaco-editor/pull/1113)\n- [Abhinav Srivastava (@krototype)](https://github.com/krototype): changed the license block of readme [PR #1133](https://github.com/Microsoft/monaco-editor/pull/1133)\n- [Mera Gangapersaud (@Mera-Gangapersaud)](https://github.com/Mera-Gangapersaud): Fixed prerequisites link in Contributing.md [PR #1155](https://github.com/Microsoft/monaco-editor/pull/1155)\n- [Michael (@michael-k)](https://github.com/michael-k): Use python examples that work [PR #1053](https://github.com/Microsoft/monaco-editor/pull/1053)\n- [Remy Suen (@rcjsuen)](https://github.com/rcjsuen): Add missing links in CHANGELOG.md [PR #1029](https://github.com/Microsoft/monaco-editor/pull/1029)\n- [Shivansh Saini (@shivanshs9)](https://github.com/shivanshs9): Fixed typos in website page and CHANGELOG [PR #1153](https://github.com/Microsoft/monaco-editor/pull/1153)\n- [Sachin Saini (@thetinygoat)](https://github.com/thetinygoat): hacktoberfest fix [PR #1131](https://github.com/Microsoft/monaco-editor/pull/1131)\n\nContributions to `monaco-languages`:\n\n- [Aastha (@AasthaGupta)](https://github.com/AasthaGupta): Fix markdown bug #1107 [PR #52](https://github.com/Microsoft/monaco-languages/pull/52)\n- [Abdussalam Abdurrahman (@finalfantasia)](https://github.com/finalfantasia): [clojure] Improve Clojure syntax highlighting. [PR #45](https://github.com/Microsoft/monaco-languages/pull/45)\n- [Abhishek (@GeekAb)](https://github.com/GeekAb): Markdown bug fix for #1107 [PR #51](https://github.com/Microsoft/monaco-languages/pull/51)\n- [Matthew D. Miller (@goober99)](https://github.com/goober99): Added support for Perl quote-like operators to fix #1101 [PR #50](https://github.com/Microsoft/monaco-languages/pull/50)\n- [Grzegorz Wcisło (@grzegorz-wcislo)](https://github.com/grzegorz-wcislo): Fix yaml string tokenization [PR #47](https://github.com/Microsoft/monaco-languages/pull/47)\n- [Pascal Berger (@pascalberger)](https://github.com/pascalberger): Use C# highlighting for Cake scripts [PR #53](https://github.com/Microsoft/monaco-languages/pull/53)\n- [Sebastian Pahnke (@spahnke)](https://github.com/spahnke)\n  - [JS/TS] Add support for alternative octal integer literal syntax [PR #49](https://github.com/Microsoft/monaco-languages/pull/49)\n  - Improve tokenization of regular expressions [PR #46](https://github.com/Microsoft/monaco-languages/pull/46)\n- [Tiago Danin (@TiagoDanin)](https://github.com/TiagoDanin): New rule for non-teminated string in yaml [PR #48](https://github.com/Microsoft/monaco-languages/pull/48)\n\nContributions to `monaco-typescript`:\n\n- [Parikshit Hooda (@Parikshit-Hooda)](https://github.com/Parikshit-Hooda): fixed typo in line 11 [PR #23](https://github.com/Microsoft/monaco-typescript/pull/23)\n- [Sebastian Pahnke (@spahnke)](https://github.com/spahnke): Render documentation in suggestion widget as Markdown [PR #22](https://github.com/Microsoft/monaco-typescript/pull/22)\n\nContributions to `monaco-json`:\n\n- [Igor Nesterenko (@nesterone)](https://github.com/nesterone): Provide diagnostic option to enable on-demand schema loading [PR #7](https://github.com/Microsoft/monaco-json/pull/7)\n\nContributions to `monaco-css`:\n\n- [Richard Samuelson (@ricsam)](https://github.com/ricsam): Fix indentation on the CSS test page [PR #7](https://github.com/Microsoft/monaco-css/pull/7)\n\n## [0.14.3] (17.08.2018)\n\n- Fixes TypeScript/JavaScript coloring of regular expressions https://github.com/Microsoft/monaco-editor/issues/1009\n\n## [0.14.2] (10.08.2018)\n\n- Reverts https://github.com/Microsoft/monaco-editor/pull/981\n\n## [0.14.1] (10.08.2018)\n\n- Fixes Find All References (https://github.com/Microsoft/vscode/issues/56160)\n\n## [0.14.0] (10.08.2018)\n\n### New \u0026 Noteworthy\n\n- Using tree-shaking to reduce the amount of shipped code.\n- TypeScript and JavaScript coloring is now done with Monarch.\n- `typescriptServices` is no longer loaded on the UI thread, this helps with webpack's bundle output size.\n- Added coloring for: apex, azcli, clojure, powerquery, rust, scheme and shell.\n- Added sub-word navigation commands.\n- Added font zoom commands.\n- Syntax highlighting for deleted lines in inline diff editor.\n- Highlighted indent guide.\n- Column selection using middle mouse button.\n- Added editor options: `scrollBeyondLastColumn`, `hover`, `suggest`, `highlightActiveIndentGuide`, `showUnused`.\n- Added `setTokensProvider` with `EncodedTokensProvider`.\n- Added `monaco.languages.getEncodedLanguageId` to get the numeric language id.\n- `DefinitionProvider.provideDefinition`, `ImplementationProvider.provideImplementation`, `TypeDefinitionProvider.provideTypeDefinition` can now return a `DefinitionLink`.\n\n### Breaking Changes\n\n- Removed no longer used `Severity`.\n- Renamed `IEditor.isFocused` to `IEditor.hasTextFocus`.\n- Renamed `ICodeEditor.onDidFocusEditor` to `ICodeEditor.onDidFocusEditorWidget`.\n- Renamed `ICodeEditor.onDidBlurEditor` to `ICodeEditor.onDidBlurEditorWidget`.\n- `DocumentSymbolProvider.provideDocumentSymbols` must now return `DocumentSymbol[]`.\n\n### Thank you\n\nContributions to `monaco-editor`:\n\n- [Ali Mirlou (@AliMirlou)](https://github.com/AliMirlou): Fix typo [PR #952](https://github.com/Microsoft/monaco-editor/pull/952)\n- [Avelino (@avelino)](https://github.com/avelino): added clojure exampple [PR #904](https://github.com/Microsoft/monaco-editor/pull/904)\n- [Sebastián Gurin (@cancerberoSgx)](https://github.com/cancerberoSgx): fix small error in integration docs [PR #957](https://github.com/Microsoft/monaco-editor/pull/957)\n- [Haegyun Jung (@haeguri)](https://github.com/haeguri): Fix playground sample option [PR #962](https://github.com/Microsoft/monaco-editor/pull/962)\n  (https://github.com/Microsoft/monaco-editor/pull/914)\n- [Myles Scolnick (@mscolnick)](https://github.com/mscolnick): add sideEffects false for tree-shaking in webpack [PR #981](https://github.com/Microsoft/monaco-editor/pull/981)\n- [Niklas Mollenhauer (@nikeee)](https://github.com/nikeee): Fix hash comment in xdot sample [PR #916](https://github.com/Microsoft/monaco-editor/pull/916)\n- [Remy Suen (@rcjsuen)](https://github.com/rcjsuen): Add folding provider sample to the playground [PR #878](https://github.com/Microsoft/monaco-\n\nContributions to `monaco-typescript`:\n\n- [Fathy Boundjadj (@fathyb)](https://github.com/fathyb): Use Markdown code block for hover tooltip [PR #20](https://github.com/Microsoft/monaco-typescript/pull/20)\n- [Matt McCutchen (@mattmccutchen)](https://github.com/mattmccutchen): Clear the `file` fields of `relatedInformation` too. (WIP) [PR #21](https://github.com/Microsoft/monaco-typescript/pull/21)\n\nContributions to `monaco-languages`:\n\n- [Avelino (@avelino)](https://github.com/avelino)\n  - upgrade all language support (today) [PR #35](https://github.com/Microsoft/monaco-languages/pull/35)\n  - Clojure support [PR #36](https://github.com/Microsoft/monaco-languages/pull/36)\n  - Clojure: added more keywords [PR #37](https://github.com/Microsoft/monaco-languages/pull/37)\n- [Faris Masad (@masad-frost)](https://github.com/masad-frost)\n  - Fix Clojure syntax highlighting [PR #38](https://github.com/Microsoft/monaco-languages/pull/38)\n  - Add Scheme language [PR #34](https://github.com/Microsoft/monaco-languages/pull/34)\n  - Add auto-indentation for python [PR #33](https://github.com/Microsoft/monaco-languages/pull/33)\n- [Matt Masson (@mattmasson)](https://github.com/mattmasson): Add support for Power Query (M) language [PR #42](https://github.com/Microsoft/monaco-languages/pull/42)\n- [Oli Lane (@olane)](https://github.com/olane): Add Apex language [PR #44](https://github.com/Microsoft/monaco-languages/pull/44)\n- [Viktar Pakanechny (@Vityanchys)](https://github.com/Vityanchys): Added azcli [PR #43](https://github.com/Microsoft/monaco-languages/pull/43)\n- [zqlu (@zqlu)](https://github.com/zqlu)\n  - Add Shell language [PR #39](https://github.com/Microsoft/monaco-languages/pull/39)\n  - Add Perl language [PR #40](https://github.com/Microsoft/monaco-languages/pull/40)\n  - add perl to bundle.js [PR #41](https://github.com/Microsoft/monaco-languages/pull/41)\n\n## [0.13.1] (15.05.2018)\n\n- Fixes [issue #871](https://github.com/Microsoft/monaco-editor/issues/871): TypeScript import error after mocaco-editor upgraded from 0.12 to 0.13\n\n## [0.13.0] (11.05.2018)\n\n### New \u0026 Noteworthy\n\n- New folding provider `registerFoldingRangeProvider`.\n- You can now specifies the stack order of a decoration by setting `IModelDecorationOptions.zIndex`. A decoration with greater stack order is always in front of a decoration with a lower stack order.\n- You can now tell Monaco if there is an `inlineClassName` which affects letter spacing. the stack order of a decoration by setting `IModelDecorationOptions.inlineClassNameAffectsLetterSpacing`.\n- Get the text length for a certain line on text model (`ITextModel.getLineLength(lineNumber: number)`)\n- New option `codeActionsOnSave`, controls whether code action kinds will be run on save.\n- New option `codeActionsOnSaveTimeout`, controls timeout for running code actions on save.\n- New option `multiCursorMergeOverlapping`, controls if overlapping selections should be merged. Default to `true`.\n\n### Breaking Change\n\n- Removed `ICodeEditor.getCenteredRangeInViewport`.\n- `RenameProvider.resolveRenameLocation` now returns `RenameLocation` instead of `IRange`.\n\n### Thank you\n\n- [Sergey Romanov @Serhioromano](https://github.com/Serhioromano): Add new language Structured Text support [PR monaco-languages#32](https://github.com/Microsoft/monaco-languages/pull/32)\n- [Yukai Huang @Yukaii](https://github.com/Yukaii): Fix backspace in IME composition on iOS Safari [PR vscode#40546](https://github.com/Microsoft/vscode/pull/40546)\n\n## [0.12.0] (11.04.2018)\n\n- Special thanks to [Tim Kendrick](https://github.com/timkendrick) for contributing a webpack plugin - `monaco-editor-webpack-plugin` - now available on [npm](https://www.npmjs.com/package/monaco-editor-webpack-plugin).\n\n### Breaking changes\n\n- Introduced `MarkerSeverity` instead of `Severity` for markers serverity.\n- Replaced `RenameProvider.resolveInitialRenameValue` with `RenameProvider.resolveRenameLocation`.\n- Fixed typo in `monaco-typescript`, renamed `setMaximunWorkerIdleTime` to `setMaximumWorkerIdleTime`.\n\n### Thank you\n\n- [Remy Suen @rcjsuen](https://github.com/rcjsuen): Fix conversion code from MarkedString to IMarkdownString in hovers [PR monaco-css#5](https://github.com/Microsoft/monaco-css/pull/5)\n- [Peng Xiao @pengx17](https://github.com/pengx17): fix an issue of `fromMarkdownString` [PR monaco-json#4](https://github.com/Microsoft/monaco-json/pull/4)\n- [TJ Kells @systemsoverload](https://github.com/systemsoverload): Add rust colorization support [PR monaco-languages#31](https://github.com/Microsoft/monaco-languages/pull/31)\n\n## [0.11.1] (15.03.2018)\n\n- Fixes [issue #756](https://github.com/Microsoft/monaco-editor/issues/756): Can't use \"Enter\" key to accept an IntelliSense item\n- Fixes [issue #757](https://github.com/Microsoft/monaco-editor/issues/757): TypeScript errors in `editor.api.d.ts` typings\n\n## [0.11.0] (14.03.2018)\n\n### New \u0026 Noteworthy\n\n- **ESM distribution** (compatible with e.g. webpack).\n- New interval tree decorations implementation.\n- New piece tree text buffer implementation.\n- The minimap can be placed to the left.\n- Line numbers can be displayed in an interval.\n- The cursor width can be customized.\n- Smooth scrolling can be turned on.\n- Color decorators and color picker via `DocumentColorProvider`.\n\n### Breaking changes\n\n- Replaced `MarkedString` with `IMarkdownString`. Source code snippets can be expressed using the GH markdown syntax.\n- Renamed `IResourceEdit` to `ResourceTextEdit`.\n\n### API changes\n\n- Merged `IModel`, `IReadOnlyModel`, `IEditableTextModel`, `ITextModelWithMarkers`, `ITokenizedModel`, `ITextModelWithDecorations` to `ITextModel`. A type alias for `IModel` is defined for compatibility.\n- Merged `ICommonCodeEditor` and `ICodeEditor` to `ICodeEditor`.\n- Merged `ICommonDiffEditor` and `IDiffEditor` to `IDiffEditor`.\n- `CompletionItem.documentation`, `ParameterInformation.documentation` and `SignatureInformation.documentation` can now be an `IMarkdownString`.\n- Added `CompetionItem.command`, `CompletionItem.commitCharacters` and `CompletionItem.additionalTextEdits`.\n- Added language configuration `folding` which can define markers for code patterns where a folding regions should be created. See for example the [Python configuration](https://github.com/Microsoft/monaco-languages/blob/d2db3faa76b741bf4ee822c403fc355c913bc46d/src/python/python.ts#L35-L41).\n- Added by accident `ResourceFileEdit` (due to how `monaco.d.ts` is generated from vscode). That is not honoured by the editor, and should not be used.\n\n### Thank you\n\n- [Remy Suen @rcjsuen](https://github.com/rcjsuen):\n  - Fix a small typo in README.md [PR monaco-typescript#18](https://github.com/Microsoft/monaco-typescript/pull/18)\n  - Remove unused IDisposable array [PR monaco-typescript#19](https://github.com/Microsoft/monaco-typescript/pull/19)\n  - Add HEALTHCHECK as a Dockerfile keyword [PR monaco-languages#29](https://github.com/Microsoft/monaco-languages/pull/29)\n  - Add ARG as a Dockerfile keyword [PR monaco-languages#30](https://github.com/Microsoft/monaco-languages/pull/30)\n- [Can Abacigil @abacigil](https://github.com/abacigil): MySQL, Postgres, Redshift and Redis Language Support [PR monaco-languages#26](https://github.com/Microsoft/monaco-languages/pull/26)\n- [Matthias Kadenbach @mattes](https://github.com/mattes): Support Content-Security-Policy syntax highlighting [PR monaco-languages#27](https://github.com/Microsoft/monaco-languages/pull/27)\n- [e.vakili @evakili](https://github.com/evakili): Whitespaces after # are allowed in C++ preprocessor statements [PR monaco-languages#28](https://github.com/Microsoft/monaco-languages/pull/28)\n- [Pankaj Kumar Gautam @PAPERPANKS](https://github.com/PAPERPANKS): adding microsoft logo to footer [PR monaco-editor#577](https://github.com/Microsoft/monaco-editor/pull/577)\n- [Dominik Moritz @domoritz](https://github.com/domoritz): Fix code in changelog [PR monaco-editor#582](https://github.com/Microsoft/monaco-editor/pull/582)\n- [ItsPugle @ItsPugle](https://github.com/ItsPugle): Updating the footer to reflect change of year [PR monaco-editor#707](https://github.com/Microsoft/monaco-editor/pull/707)\n- [Michael Seifert @MSeifert04](https://github.com/MSeifert04): Add linebreak for if [PR monaco-editor#726](https://github.com/Microsoft/monaco-editor/pull/726)\n- [Andrew Palm @apalm](https://github.com/apalm): Fix 'Configure JSON defaults' sample [PR monaco-editor#731](https://github.com/Microsoft/monaco-editor/pull/731)\n- [Niklas Mollenhauer @nikeee](https://github.com/nikeee): Fix line number API usage [PR monaco-editor#740](https://github.com/Microsoft/monaco-editor/pull/740)\n- [Andre @anc](https://github.com/anc): More realistic terminal shell [PR monaco-editor#742](https://github.com/Microsoft/monaco-editor/pull/742)\n- to the many others that have contributed PRs to [vscode](https://github.com/Microsoft/vscode) which have also made their way into the monaco-editor.\n\n## [0.10.1] (16.10.2017)\n\n- Fixes [issue #601](https://github.com/Microsoft/monaco-editor/issues/601): window.opener should be set to null to protect against malicious code\n\n## [0.10.0] (17.08.2017)\n\n### Breaking changes\n\n- Removed `CodeAction`.\n- Method `provideCodeActions` in `CodeActionProvider` now returns `Command[] | Thenable\u003cCommand[]\u003e` instead of `CodeAction[] | Thenable\u003cCodeAction[]\u003e`, which is already removed.\n\n### API changes\n\n- added `monaco.editor.getModelMarkers`. Get markers for owner and/or resource.\n\n### Notable Fixes\n\n- No longer use CSS class `.row` for command palette to avoid CSS conflicts with Bootstrap.\n- Fix Accessibility Help Dialog accessible issue on IE/Edge.\n- Fix Find Widget CSS compatibility issues with IE11.\n- Toggle Block Comment can remove extra whitespaces.\n\n### Thank you\n\n- [Kitson Kelly @kitsonk](https://github.com/kitsonk): Update monaco-typescript to TypeScript 2.4.1 [PR monaco-typescript#15](https://github.com/Microsoft/monaco-typescript/pull/15)\n- [@duncanwerner](https://github.com/duncanwerner): Add hex number tokenization to R language [PR monaco-languages#21](https://github.com/Microsoft/monaco-languages/pull/21)\n- [Remy Suen @rcjsuen](https://github.com/rcjsuen): Update Dockerfile grammar with STOPSIGNAL and SHELL instructions [PR monaco-languages#22](https://github.com/Microsoft/monaco-languages/pull/22)\n- [Marlene Cota @marlenecota](https://github.com/marlenecota): Add Small Basic support [PR monaco-languages#23](https://github.com/Microsoft/monaco-languages/pull/23)\n- [Ben Jacobson @bjacobso](https://github.com/bjacobso): Add LIMIT to sql keywords [PR monaco-languages#24](https://github.com/Microsoft/monaco-languages/pull/24)\n- to the many others that have contributed PRs to [vscode](https://github.com/Microsoft/vscode) which have also made their way into the monaco-editor.\n\n## [0.9.0] (03.07.2017)\n\n### New \u0026 Noteworthy\n\n- Minimap (on by default, use `editor.minimap` to disable it).\n- Drag and Drop (on by default, use `editor.dragAndDrop` to disable it).\n- Copy text with formatting.\n\n### Accessibility\n\n- There is a new [guide for making the editor accessible to all](https://github.com/Microsoft/monaco-editor/wiki/Accessibility-Guide-for-Integrators).\n- There is a new Alt+F1 (Ctrl+F1 in IE) accessibility help panel.\n- There is a new F8/Shift+F8 diff review panel in the diff editor.\n- Many bugfixes, including now respecting the Windows High Contrast Theme on Edge.\n\n### Breaking changes\n\n- A lot has changed w.r.t. how themes work in the editor, mostly driven by the work to support theming in VS Code. `editor.updateOptions()` **no longer accepts `theme`**; the theme can be changed via the newly introduced `monaco.editor.setTheme()`. Additionally, we recommend editor colors be customized via `monaco.editor.defineTheme()` instead of via CSS -- see [sample](https://microsoft.github.io/monaco-editor/playground.html#customizing-the-appearence-exposed-colors). The color names will be stable, while the CSS class names might break at any time.\n- Support for the internal snippet syntax **has been discontinued** and snippet must now use the official, TextMate-like syntax. Find its grammar and samples [here](https://code.visualstudio.com/docs/editor/userdefinedsnippets#_snippet-syntax).\n- Changed `IModel.findMatches` to accept a list of word separators.\n- Changed the shape of the `IModelContentChangedEvent` emitted via `IModel.onDidChangeContent` to **now contain a batch** of all the changes that the model had.\n- No longer using `transform: translate3d`, now using `will-change: transform` for browser layer hinting. Use the `disableLayerHinting` option if you have any trouble with browser layers (blurriness or high GPU memory usage).\n- Simplified wrapping settings: `wordWrap`, `wordWrapColumn` and `wordWrapMinified`.\n\n### API changes\n\n- added `monaco.languages.registerTypeDefinitionProvider`.\n- new editor options:\n  - `accessibilityHelpUrl` - the url of a page to open for documentation about how to operate the editor when using a Screen Reader.\n  - `find.seedSearchStringFromSelection` - Ctrl+F/Cmd+F seeds search string from the editor selection.\n  - `find.autoFindInSelection` - Ctrl+F/Cmd+F turns on the find in selection toggle if the editor selection is multiline.\n  - `minimap.enabled` - enable minimap.\n  - `minimap.showSlider` - control when to render the minimap slider.\n  - `minimap.renderCharacters` - render characters or blocks in the minimap.\n  - `minimap.maxColumn` - maximum number of columns the minimap shows.\n  - `overviewRulerBorder` - toggle that the overview ruler renders a border.\n  - `links` - enable link detection.\n  - `multiCursorModifier` - change the multi cursor modifier key.\n  - `accessibilitySupport` - optimize the editor for use with a Screen Reader.\n  - `autoIndent` - automatically fix indentation when moving lines, pasting or typing.\n  - `dragAndDrop` - dragging and dropping editor selection within the editor.\n  - `occurrencesHighlight` - enable highlighting of occurences.\n  - `showFoldingControls` - fine-tune when the folding icons should show\n  - `matchBrackets` - enable bracket matching\n  - `letterSpacing` - configure font's letter-spacing.\n\n### Thank you\n\n- [Joey Marianer (@jmarianer)](https://github.com/jmarianer): Support literal interpolated strings ($@\"\") [PR monaco-languages#13](https://github.com/Microsoft/monaco-languages/pull/13)\n- [@AndersMad](https://github.com/AndersMad): HTML Tags: Add support for dash and fix colon in end tag [PR monaco-languages#14](https://github.com/Microsoft/monaco-languages/pull/14)\n- [Sandy Armstrong (@sandyarmstrong)](https://github.com/sandyarmstrong): csharp: add support for binary literals and \\_ as separator [PR monaco-languages#16](https://github.com/Microsoft/monaco-languages/pull/16)\n- [Anton Kosyakov (@akosyakov)](https://github.com/akosyakov): Include src as a part of npm package [PR monaco-languages#17](https://github.com/Microsoft/monaco-languages/pull/17)\n- [Andrew Bonventre (@andybons)](https://github.com/andybons): Fix typo: concering → concerning [PR monaco-languages#18](https://github.com/Microsoft/monaco-languages/pull/18)\n- [Scott McMaster (@scottmcmaster)](https://github.com/scottmcmaster): MSDAX support [PR monaco-languages#19](https://github.com/Microsoft/monaco-languages/pull/19)\n- [Luzian Serafin (@lserafin)](https://github.com/lserafin): Add Solidity [PR monaco-languages#20](https://github.com/Microsoft/monaco-languages/pull/20)\n- [Kitson Kelly (@kitsonk)](https://github.com/kitsonk): Update to TypeScript 2.3.4 [PR monaco-typescript#13](https://github.com/Microsoft/monaco-typescript/pull/13)\n- [Kitson Kelly (@kitsonk)](https://github.com/kitsonk): Add documentation support on hover [PR monaco-typescript#14](https://github.com/Microsoft/monaco-typescript/pull/14)\n- [@replacepreg](https://github.com/replacepreg): Updating date at footer [PR monaco-editor#409](https://github.com/Microsoft/monaco-editor/pull/409)\n- [Aarin Smith (@aarinsmith)](https://github.com/aarinsmith): Fixed spelling error in README.md:85 'instantion' -\u003e 'instantiation' [PR monaco-editor#440](https://github.com/Microsoft/monaco-editor/pull/440)\n- to the many others that have contributed PRs to [`vscode`](https://github.com/Microsoft/vscode) which have also made their way into the `monaco-editor`.\n\n---\n\n## [0.8.3] (03.03.2017)\n\n- Fixes an issue in monaco-typescript where it would attempt to validate a disposed model.\n\n---\n\n## [0.8.2] (01.03.2017)\n\n- Fixes the following regressions:\n  - [issue #385](https://github.com/Microsoft/monaco-editor/issues/385): Cannot add action to the left-hand-side of the diff editor\n  - [issue #386](https://github.com/Microsoft/monaco-editor/issues/386): Shortcuts for actions added via editor.addAction don't show up in the Command Palette\n  - [issue #387](https://github.com/Microsoft/monaco-editor/issues/387): Cannot change diff editor to a custom theme based on high contrast\n\n---\n\n## [0.8.1] (27.01.2017)\n\n- CSS/JSON/HTML language supports updated:\n  - CSS: Support for @apply\n  - SCSS: Map support\n  - New HTML formatter options: unformatedContent, wrapAttributes\n- Fixed issue where the editor was throwing in Safari due to `Intl` missing.\n- Fixed multiple issues where the editor would not position the cursor correctly when using browser zooming.\n\n### API\n\n- Added `disableMonospaceOptimizations` editor option that can be used in case browser zooming exposes additional issues.\n- Added `formatOnPaste` editor option.\n- Added `IActionDescriptor.precondition`.\n- **Breaking change**: renamed `registerTypeDefinitionProvider` to `registerImplementationProvider` and associated types.\n\n---\n\n## [0.8.0] (18.01.2017)\n\n- This release has been brewing for a while and comes with quite a number of important changes.\n- There are many bugfixes and speed/memory usage improvements.\n- Now shipping TypeScript v2.1.5 in `monaco-typescript` (JS and TS language support).\n\n### No longer supporting IE9 and IE10\n\n- we have not made the editor fail on purpose in these browsers, but we have removed IE9/IE10 targeted workarounds from our codebase;\n- now using **Typed Arrays** in a number of key places resulting in considerable speed boosts and lower memory consumption.\n\n### Monarch Tokenizer\n\n- Monarch states are now memoized up to a depth of 5. This results in considerable memory improvements for files with many lines.\n- Speed improvements to Monarch tokenizer that resulted in one **breaking change**:\n- when entering an embedded mode (i.e. `nextEmbedded`), the state ending up in must immediately contain a `nextEmbedded: \"@pop\"` rule. This helps in quickly figuring out where the embedded mode should be left. The editor will throw an error if the Monarch grammar does not respect this condition.\n\n### Tokens are styled in JS (not in CSS anymore)\n\n- This is a **breaking change**\n- Before, token types would be rendered on the `span` node of text, and CSS rules would match token types and assign styling to them (i.e. color, boldness, etc.to style tokens)\n- To enable us to build something like a minimap, we need to know the text color in JavaScript, and we have therefore moved the token style matching all to JavaScript. In the future, we foresee that even decorations will have to define their color in JavaScript.\n- It is possible to create a custom theme via a new API method `monaco.editor.defineTheme()` and the playground contains a sample showing how that works.\n- Token types can be inspected via `F1` \u003e `Developer: Inspect tokens`. This will bring up a widget showing the token type and the applied styles.\n\n### API changes:\n\n#### Namespaces\n\n- added `monaco.editor.onDidCreateEditor` that will be fired whenever an editor is created (will fire even for a diff editor, with the two editors that a diff editor consists of).\n- added `monaco.editor.tokenize` that returns logical tokens (before theme matching, as opposed to `monaco.editor.colorize`).\n- added `monaco.languages.registerTypeDefinitionProvider`\n\n#### Models\n\n- removed `IModel.getMode()`.\n- structural changes in the events `IModelLanguageChangedEvent`, `IModelDecorationsChangedEvent` and `IModelTokensChangedEvent`;\n- changed `IModel.findMatches`, `IModel.findNextMatch` and `IModel.findPreviousMatch` to be able to capture matches while searching.\n\n#### Editors\n\n- `ICodeEditor.addAction` and `IDiffEditor.addAction` now return an `IDisposable` to be able to remove a previously added action.\n- renamed `ICodeEditor.onDidChangeModelMode ` to `ICodeEditor.onDidChangeModelLanguage`;\n- `ICodeEditor.executeEdits` can now take resulting selection for better undo/redo stack management;\n- added `ICodeEditor.getTargetAtClientPoint(clientX, clientY)` to be able to do hit testing.\n- added `IViewZone.marginDomNode` to be able to insert a dom node in the margin side of a view zone.\n- settings:\n  - `lineDecorationsWidth` can now take a value in the form of `\"1.2ch\"` besides the previous accepted number (in px)\n  - `renderLineHighlight` can now take a value in the set `'none' | 'gutter' | 'line' | 'all'`.\n  - added `fixedOverflowWidgets` to render overflowing content widgets as `'fixed'` (defaults to false)\n  - added `acceptSuggestionOnCommitCharacter` to accept suggestions on provider defined characters (defaults to true)\n  - added `emptySelectionClipboard` - copying without a selection copies the current line (defaults to true)\n  - added `suggestFontSize` - the font size for the suggest widget\n  - added `suggestLineHeight` - the line height for the suggest widget\n- diff editor settings:\n  - added `renderIndicators` - Render +/- indicators for added/deleted changes. (defaults to true)\n\n### Thank you\n\n- [Nico Tonozzi (@nicot)](https://github.com/nicot): Register React file extensions [PR monaco-typescript#12](https://github.com/Microsoft/monaco-typescript/pull/12)\n- [Jeong Woo Chang (@inspiredjw)](https://github.com/inspiredjw): Cannot read property 'uri' of null fix [PR vscode#13263](https://github.com/Microsoft/vscode/pull/13263)\n- [Jan Pilzer(@Hirse)](https://github.com/Hirse): Add YAML samples [PR monaco-editor#242](https://github.com/Microsoft/monaco-editor/pull/242)\n\n---\n\n## [0.7.1] (07.10.2016)\n\n- Bugfixes in monaco-html, including fixing formatting.\n\n---\n\n## [0.7.0] (07.10.2016)\n\n- Adopted TypeScript 2.0 in all the repos (also reflected in `monaco.d.ts`).\n- Added YAML colorization support.\n- Brought back the ability to use `editor.addAction()` and have the action show in the context menu.\n- Web workers now get a nice label next to the script name.\n\n### API changes:\n\n- settings:\n  - new values for `lineNumbers`: `'on' | 'off' | 'relative'`\n  - new values for `renderWhitespace`: `'none' | 'boundary' | 'all'`\n- removed `model.setMode()`, as `IMode` will soon disappear from the API.\n\n### Debt work\n\n- Removed HTML, razor, PHP and handlebars from `monaco-editor-core`:\n  - the `monaco-editor-core` is now finally language agnostic.\n  - coloring for HTML, razor, PHP and handlebars is now coming in from `monaco-languages`.\n  - language smarts for HTML, razor and handlebars now comes from `monaco-html`.\n- Packaging improvements:\n  - thanks to the removal of the old languages from `monaco-editor-core`, we could improve the bundling and reduce the number of .js files we ship.\n  - we are thinking about simplifying this further in the upcoming releases.\n\n### Thank you\n\n- [Sandy Armstrong (@sandyarmstrong)](https://github.com/sandyarmstrong): csharp: allow styling #r/#load [PR monaco-languages#9](https://github.com/Microsoft/monaco-languages/pull/9)\n- [Nico Tonozzi (@nicot)](https://github.com/nicot): Go: add raw string literal syntax [PR monaco-languages#10](https://github.com/Microsoft/monaco-languages/pull/10)\n- [Jason Killian (@JKillian)](https://github.com/JKillian): Add vmin and vmax CSS units [PR monaco-languages#11](https://github.com/Microsoft/monaco-languages/pull/11)\n- [Jan Pilzer (@Hirse)](https://github.com/Hirse): YAML colorization [PR monaco-languages#12](https://github.com/Microsoft/monaco-languages/pull/12)\n- [Sam El-Husseini (@microsoftsam)](https://github.com/microsoftsam): Using Cmd+Scroll to zoom on a mac [PR vscode#12477](https://github.com/Microsoft/vscode/pull/12477)\n\n---\n\n## [0.6.1] (06.09.2016)\n\n- Fixed regression where `editor.addCommand` was no longer working.\n\n---\n\n## [0.6.0] (05.09.2016)\n\n- This will be the last release that contains specific IE9 and IE10 fixes/workarounds. We will begin cleaning our code-base and remove them.\n- We plan to adopt TypeScript 2.0, so this will be the last release where `monaco.d.ts` is generated by TypeScript 1.8.\n- `javascript` and `typescript` language services:\n  - exposed API to get to the underlying language service.\n  - fixed a bug that prevented modifying `extraLibs`.\n- Multiple improvements/bugfixes to the `css`, `less`, `scss` and `json` language services.\n- Added support for ATS/Postiats.\n\n### API changes:\n\n- settings:\n  - new: `mouseWheelZoom`, `wordWrap`, `snippetSuggestions`, `tabCompletion`, `wordBasedSuggestions`, `renderControlCharacters`, `renderLineHighlight`, `fontWeight`.\n  - removed: `tabFocusMode`, `outlineMarkers`.\n  - renamed: `indentGuides` -\u003e `renderIndentGuides`, `referenceInfos` -\u003e `codeLens`\n- added `editor.pushUndoStop()` to explicitly push an undo stop\n- added `suppressMouseDown` to `IContentWidget`\n- added optional `resolveLink` to `ILinkProvider`\n- removed `enablement`, `contextMenuGroupId` from `IActionDescriptor`\n- removed exposed constants for editor context keys.\n\n### Notable bugfixes:\n\n- Icons missing in the find widget in IE11 [#148](https://github.com/Microsoft/monaco-editor/issues/148)\n- Multiple context menu issues\n- Multiple clicking issues in IE11/Edge ([#137](https://github.com/Microsoft/monaco-editor/issues/137), [#118](https://github.com/Microsoft/monaco-editor/issues/118))\n- Multiple issues with the high-contrast theme.\n- Multiple IME issues in IE11, Edge and Firefox.\n\n### Thank you\n\n- [Pavel Kolev (@paveldk)](https://github.com/paveldk): Fix sending message to terminated worker [PR vscode#10833](https://github.com/Microsoft/vscode/pull/10833)\n- [Pavel Kolev (@paveldk)](https://github.com/paveldk): Export getTypeScriptWorker \u0026 getJavaScriptWorker to monaco.languages.typescript [PR monaco-typescript#8](https://github.com/Microsoft/monaco-typescript/pull/8)\n- [Sandy Armstrong (@sandyarmstrong)](https://github.com/sandyarmstrong): Support CompletionItemKind.Method. [PR vscode#10225](https://github.com/Microsoft/vscode/pull/10225)\n- [Sandy Armstrong (@sandyarmstrong)](https://github.com/sandyarmstrong): Fix show in IE11 [PR vscode#10309](https://github.com/Microsoft/vscode/pull/10309)\n- [Sandy Armstrong (@sandyarmstrong)](https://github.com/sandyarmstrong): Correct docs for IEditorScrollbarOptions.useShadows [PR vscode#11312](https://github.com/Microsoft/vscode/pull/11312)\n- [Artyom Shalkhakov (@ashalkhakov)](https://github.com/ashalkhakov): Adding support for ATS/Postiats [PR monaco-languages#5](https://github.com/Microsoft/monaco-languages/pull/5)\n\n---\n\n## [0.5.1] (24.06.2016)\n\n- Fixed mouse handling in IE\n\n---\n\n## [0.5.0] (24.06.2016)\n\n### Breaking changes\n\n- `monaco.editor.createWebWorker` now loads the AMD module and calls `create` and passes in as first argument a context of type `monaco.worker.IWorkerContext` and as second argument the `initData`. This **breaking change** was needed to allow handling the case of misconfigured web workers (running on a file protocol or the cross-domain case)\n- the `CodeActionProvider.provideCodeActions` now gets passed in a `CodeActionContext` that contains the markers at the relevant range.\n- the `hoverMessage` of a decoration is now a `MarkedString | MarkedString[]`\n- the `contents` of a `Hover` returned by a `HoverProvider` is now a `MarkedString | MarkedString[]`\n- removed deprecated `IEditor.onDidChangeModelRawContent`, `IModel.onDidChangeRawContent`\n\n### Notable fixes\n\n- Broken configurations (loading from `file://` or misconfigured cross-domain loading) now load the web worker code in the UI thread. This caused a **breaking change** in the behaviour of `monaco.editor.createWebWorker`\n- The right-pointing mouse pointer is oversized in high DPI - [issue](https://github.com/Microsoft/monaco-editor/issues/5)\n- The editor functions now correctly when hosted inside a `position:fixed` element.\n- Cross-origin configuration is now picked up (as advertised in documentation from MonacoEnvironment)\n\n[0.24.0]: https://github.com/Microsoft/monaco-editor/compare/v0.23.0...v0.24.0\n[0.23.0]: https://github.com/Microsoft/monaco-editor/compare/v0.22.3...v0.23.0\n[0.22.3]: https://github.com/Microsoft/monaco-editor/compare/v0.22.2...v0.22.3\n[0.22.2]: https://github.com/Microsoft/monaco-editor/compare/v0.22.1...v0.22.2\n[0.22.1]: https://github.com/Microsoft/monaco-editor/compare/v0.22.0...v0.22.1\n[0.22.0]: https://github.com/Microsoft/monaco-editor/compare/v0.21.3...v0.22.0\n[0.21.3]: https://github.com/Microsoft/monaco-editor/compare/v0.21.2...v0.21.3\n[0.21.2]: https://github.com/Microsoft/monaco-editor/compare/v0.21.1...v0.21.2\n[0.21.1]: https://github.com/Microsoft/monaco-editor/compare/v0.21.0...v0.21.1\n[0.21.0]: https://github.com/Microsoft/monaco-editor/compare/v0.20.0...v0.21.0\n[0.20.0]: https://github.com/Microsoft/monaco-editor/compare/v0.19.3...v0.20.0\n[0.19.3]: https://github.com/Microsoft/monaco-editor/compare/v0.19.2...v0.19.3\n[0.19.2]: https://github.com/Microsoft/monaco-editor/compare/v0.19.1...v0.19.2\n[0.19.1]: https://github.com/Microsoft/monaco-editor/compare/v0.20.0...v0.19.1\n[0.19.0]: https://github.com/Microsoft/monaco-editor/compare/v0.18.1...v0.19.0\n[0.18.1]: https://github.com/Microsoft/monaco-editor/compare/v0.18.0...v0.18.1\n[0.18.0]: https://github.com/Microsoft/monaco-editor/compare/v0.17.1...v0.18.0\n[0.17.1]: https://github.com/Microsoft/monaco-editor/compare/v0.17.0...v0.17.1\n[0.17.0]: https://github.com/Microsoft/monaco-editor/compare/v0.16.2...v0.17.0\n[0.16.2]: https://github.com/Microsoft/monaco-editor/compare/v0.16.1...v0.16.2\n[0.16.1]: https://github.com/Microsoft/monaco-editor/compare/v0.16.0...v0.16.1\n[0.16.0]: https://github.com/Microsoft/monaco-editor/compare/v0.15.6...v0.16.0\n[0.15.6]: https://github.com/Microsoft/monaco-editor/compare/v0.15.5...v0.15.6\n[0.15.5]: https://github.com/Microsoft/monaco-editor/compare/v0.15.4...v0.15.5\n[0.15.4]: https://github.com/Microsoft/monaco-editor/compare/v0.15.3...v0.15.4\n[0.15.3]: https://github.com/Microsoft/monaco-editor/compare/v0.15.2...v0.15.3\n[0.15.2]: https://github.com/Microsoft/monaco-editor/compare/v0.15.1...v0.15.2\n[0.15.1]: https://github.com/Microsoft/monaco-editor/compare/v0.15.0...v0.15.1\n[0.15.0]: https://github.com/Microsoft/monaco-editor/compare/v0.14.3...v0.15.0\n[0.14.3]: https://github.com/Microsoft/monaco-editor/compare/v0.14.2...v0.14.3\n[0.14.2]: https://github.com/Microsoft/monaco-editor/compare/v0.14.1...v0.14.2\n[0.14.1]: https://github.com/Microsoft/monaco-editor/compare/v0.14.0...v0.14.1\n[0.14.0]: https://github.com/Microsoft/monaco-editor/compare/v0.13.1...v0.14.0\n[0.13.1]: https://github.com/Microsoft/monaco-editor/compare/v0.13.0...v0.13.1\n[0.13.0]: https://github.com/Microsoft/monaco-editor/compare/v0.12.0...v0.13.0\n[0.12.0]: https://github.com/Microsoft/monaco-editor/compare/v0.11.1...v0.12.0\n[0.11.1]: https://github.com/Microsoft/monaco-editor/compare/v0.11.0...v0.11.1\n[0.11.0]: https://github.com/Microsoft/monaco-editor/compare/v0.10.1...v0.11.0\n[0.10.1]: https://github.com/Microsoft/monaco-editor/compare/v0.10.0...v0.10.1\n[0.10.0]: https://github.com/Microsoft/monaco-editor/compare/v0.9.0...v0.10.0\n[0.9.0]: https://github.com/Microsoft/monaco-editor/compare/v0.8.3...v0.9.0\n[0.8.3]: https://github.com/Microsoft/monaco-editor/compare/v0.8.2...v0.8.3\n[0.8.2]: https://github.com/Microsoft/monaco-editor/compare/v0.8.1...v0.8.2\n[0.8.1]: https://github.com/Microsoft/monaco-editor/compare/v0.8.0...v0.8.1\n[0.6.1]: https://github.com/Microsoft/monaco-editor/compare/v0.6.0...v0.6.1\n[0.6.0]: https://github.com/Microsoft/monaco-editor/compare/v0.5.1...v0.6.0\n[0.5.1]: https://github.com/Microsoft/monaco-editor/compare/v0.5.0...v0.5.1\n","lastmodified":"2023-06-27T10:36:05.222686468Z","tags":null},"/kotlin/monaco-editor/README":{"title":"","content":"# Monaco Editor\n\n[![Build Status](https://dev.azure.com/ms/monaco-editor/_apis/build/status/microsoft.monaco-editor?label=website)](https://dev.azure.com/ms/monaco-editor/_build/latest?definitionId=3)\n\nThe Monaco Editor is the code editor which powers [VS Code](https://github.com/microsoft/vscode), with the features better described [here](https://code.visualstudio.com/docs/editor/editingevolved).\n\nPlease note that this repository contains no source code for the code editor, it only contains the scripts to package everything together and ship the `monaco-editor` npm module.\n\n![image](https://user-images.githubusercontent.com/5047891/94183711-290c0780-fea3-11ea-90e3-c88ff9d21bd6.png)\n\n## Try it out\n\nTry the editor out [on our website](https://microsoft.github.io/monaco-editor/index.html).\n\n## Installing\n\n```\n$ npm install monaco-editor\n```\n\nYou will get:\n\n- inside `esm`: ESM version of the editor (compatible with e.g. webpack)\n- inside `dev`: AMD bundled, not minified\n- inside `min`: AMD bundled, and minified\n- inside `min-maps`: source maps for `min`\n- `monaco.d.ts`: this specifies the API of the editor (this is what is actually versioned, everything else is considered private and might break with any release).\n\nIt is recommended to develop against the `dev` version, and in production to use the `min` version.\n\n## Documentation\n\n- Learn how to integrate the editor with these [complete samples](./samples/).\n  - [Integrate the AMD version](./docs/integrate-amd.md).\n  - [Integrate the ESM version](./docs/integrate-esm.md)\n- Learn how to use the editor API and try out your own customizations in the [playground](https://microsoft.github.io/monaco-editor/playground.html).\n- Explore the [API docs](https://microsoft.github.io/monaco-editor/api/index.html) or read them straight from [`monaco.d.ts`](https://github.com/microsoft/monaco-editor/blob/main/website/typedoc/monaco.d.ts).\n- Read [this guide](https://github.com/microsoft/monaco-editor/wiki/Accessibility-Guide-for-Integrators) to ensure the editor is accessible to all your users!\n- Create a Monarch tokenizer for a new programming language [in the Monarch playground](https://microsoft.github.io/monaco-editor/monarch.html).\n- Ask questions on [StackOverflow](https://stackoverflow.com/questions/tagged/monaco-editor)! Search open and closed issues, there are a lot of tips in there!\n\n## Issues\n\nCreate [issues](https://github.com/microsoft/monaco-editor/issues) in this repository for anything related to the Monaco Editor. Always mention **the version** of the editor when creating issues and **the browser** you're having trouble in. Please search for existing issues to avoid duplicates.\n\n## FAQ\n\n❓ **What is the relationship between VS Code and the Monaco Editor?**\n\nThe Monaco Editor is generated straight from VS Code's sources with some shims around services the code needs to make it run in a web browser outside of its home.\n\n❓ **What is the relationship between VS Code's version and the Monaco Editor's version?**\n\nNone. The Monaco Editor is a library and it reflects directly the source code.\n\n❓ **I've written an extension for VS Code, will it work on the Monaco Editor in a browser?**\n\nNo.\n\n\u003e Note: If the extension is fully based on the [LSP](https://microsoft.github.io/language-server-protocol/) and if the language server is authored in JavaScript, then it would be possible.\n\n❓ **Why all these web workers and why should I care?**\n\nLanguage services create web workers to compute heavy stuff outside of the UI thread. They cost hardly anything in terms of resource overhead and you shouldn't worry too much about them, as long as you get them to work (see above the cross-domain case).\n\n❓ **What is this `loader.js`? Can I use `require.js`?**\n\nIt is an AMD loader that we use in VS Code. Yes.\n\n❓ **I see the warning \"Could not create web worker\". What should I do?**\n\nHTML5 does not allow pages loaded on `file://` to create web workers. Please load the editor with a web server on `http://` or `https://` schemes.\n\n❓ **Is the editor supported in mobile browsers or mobile web app frameworks?**\n\nNo.\n\n❓ **Why doesn't the editor support TextMate grammars?**\n\n- Please see https://github.com/bolinfest/monaco-tm which puts together `monaco-editor`, `vscode-oniguruma` and `vscode-textmate` to get TM grammar support in the editor.\n\n❓ **What about IE 11 support?**\n\n- The Monaco Editor no longer supports IE 11. The last version that was tested on IE 11 is `0.18.1`.\n\n## Development setup\n\nPlease see [CONTRIBUTING](./CONTRIBUTING.md)\n\n## Code of Conduct\n\nThis project has adopted the [Microsoft Open Source Code of Conduct](https://opensource.microsoft.com/codeofconduct/). For more information see the [Code of Conduct FAQ](https://opensource.microsoft.com/codeofconduct/faq/) or contact [opencode@microsoft.com](mailto:opencode@microsoft.com) with any additional questions or comments.\n\n## License\n\nLicensed under the [MIT](https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt) License.\n","lastmodified":"2023-06-27T10:36:05.222686468Z","tags":null},"/notes/eyes":{"title":"Eye focus and main eye","content":"On sketches that illustrate eye focus, it is shown that humans, when looking straight ahead, focus their vision at a point between their eyes. I came to the conclusion that it is not true, and we focus similarly to the picture on the right.\n\nI have a small experimental proof for it. Look in the mirror. What point are you looking at most of the time? For me, it is the right eye. It is the 'main' eye. If you are looking at your eye too, try switching focus to a different eye and keep it there for some time. It might feel weird, and I think that's because you are switching your main eye. If you got acquainted with that feeling, try looking around with a switched main eye. It certainly feels as if you are focusing similarly to the right picture.\n\n{{\u003c svg \"static/eyes.svg\" \u003e}}   ","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/SQL":{"title":"SQL","content":"\n*created from [this free course](https://www.codecademy.com/courses/learn-sql)*\n\n{{\u003c table_of_contents \u003e}}\n\n## Definitions\n\n**Table** a.k.a relation\n\n**Column** - set of data values of particular type\n\n**Row** - a single record in a table\n\n**Statement** - is a command for database\n\n**Query** - command to retrieve information from database in a table form\n\n## Statements\n\n### Create\n\n```SQL\nCREATE TABLE celebs\n(\n    id   INTEGER,\n    name TEXT,\n    age  INTEGER\n);\n```\n\n### Select\n\n```SQL\nSELECT *\nFROM celebs;\n```\n\nSelect returns a new table called **result set**. It is a multiset, meaning there might be\nduplicates.\n\n`AS` - keyword to change a name of the result set (or column): `SELECT name AS 'new name'`. Columns\nare not renamed in the original table, only in the resulting one.\n\n`DISTINCT` - returns a **set** of unique values in column: `SELECT DISTINCT tools FROM inventory`.\n\n### Insert into\n\n```SQL\nINSERT INTO celebs (id, name, age)\nVALUES (1, 'Celeb name', 22);\n```\n\n### Alter table\n\n```SQL\nALTER TABLE celebs\n    ADD COLUMN twitter_handle TEXT;\nSELECT *\nFROM celebs;\n```\n\n### Update\n\nEdits rows in a table by changing column values\n\n```SQL\nUPDATE celebs\nSET twitter_handle = '@taylorswift13'\nWHERE id = 4;\n```\n\n[leetcode swap example](https://leetcode.com/problems/swap-salary/)\n\n```SQL\nUPDATE Salary\nSET sex = CASE\n              WHEN sex = 'f' THEN 'm'\n              ELSE 'f'\n    END;\n```\n\n### Delete from\n\n```SQL\nDELETE\nFROM celebs\nWHERE twitter_handle IS NULL\n```\n\n### Order by\n\nadd `DESC` at the end to receive reverse order or `ASC` to get the\nopposite. \u003cstrong style=\"color:var(--primary)\"\u003eOrder by always goes after WHERE (if WHERE present)\u003c/strong\u003e\n.\n\n```SQL\nSELECT name, year, imdb_rating\nFROM movies\nORDER BY imdb_rating DESC;\n```\n\n### Limit\n\nSpecify maximum number of rows in the result set. `LIMIT` always goes at the very end of the query.\nAlso, it is not supported in all SQL databases.\n\n```SQL\n-- get top 3 rated movies in descending order\nSELECT *\nFROM movies\nORDER BY imdb_rating DESC LIMIT 3;\n```\n\n### Case\n\nSimilar to `switch` in languages to select column.\n\n```SQL\nSELECT name,\n       CASE\n           WHEN imdb_rating \u003e 8 THEN 'Fantastic'\n           WHEN imdb_rating \u003e 6 THEN 'Poorly Received'\n           ELSE 'Avoid at All Costs'\n           END AS 'Review'\nFROM movies;\n```\n\n### Group by\n\nArrange elements into groups by same values. The `GROUP BY` statement comes after any `WHERE`\nstatements, but before `ORDER BY` or `LIMIT`.\n\n```SQL\n-- get number of apps wth more than 20000 downloads\n-- in each category\nSELECT category, COUNT(*)\nFROM apps\nWHERE downloads \u003e 20000\nGROUP BY category;\n```\n\n`ORDER BY` can use references to columns with index of column in select:\n\n```SQL\nSELECT category,\n       price,\n       AVG(downloads)\nFROM apps\nGROUP BY 1, 2;\n-- same as: GROUP BY category, price\n```\n\n### Having\n\nFor filtering groups, not rows. All types of `WHERE` clauses are usable with `HAVING`. `HAVING`\nstatement always comes after `GROUP BY`, but before `ORDER BY` and `LIMIT`.\n\nUse `WHERE` when:\nyou want to limit results based on values of individual rows\nUse `HAVING` when:\nyou want to limit results based on an aggregate property.\n\n```SQL\nSELECT price,\n       ROUND(AVG(downloads)),\n       COUNT(*)\nFROM apps\nGROUP BY price\nHAVING COUNT(*) \u003e 10;\n```\n\n## Constraints\n\nDatabase reject data (*constraint violation*) if it's not applicable to set constraints:\n`PRIMARY_KEY` - a column marked with it uniquely identifies a row (a record). **Only one column\nwith `PRIMARY_KEY` is allowed.**\n`UNIQUE` - similar to primary key, but there might be many `UNIQUE` columns.\n`NOT NULL` - must have a defined value.\n`DEFAULT` - takes additional argument that if not defined in an `insert`, will take its value.\n\n## Data types\n\n`INTEGER` - positive or negative\n`TEXT` - string\n`DATE` - YYYY-MM-DD\n`REAL` - decimal\n\n## `WHERE` operators\n\nComparison: `=`, `!=` or `\u003c\u003e`, `\u003e`, `\u003c`, `\u003e=`, `\u003c=`\n\n`LIKE` - to compare similar values `WHERE name LIKE 'bea_'` - if name contains `beat` and `Bear`,\nit will return both of them. \u003cstrong style=\"color:var(--primary)\"\u003eIs not case sensitive\u003c/strong\u003e.\n\n`IS (NOT) NULL` - It is not possible to test for null with `=` and `!=`.\n\n`BETWEEN ... AND ...` - similar to Kotlin's `in`. But has a strange\nbehavior: `WHERE name BETWEEN 'A' AND 'J'` - selects all movies starting with 'A', 'B', 'C',... '\nF', but not 'J'. However, Movie named 'J' will be selected. For numbers range is inclusive on both\nsides.\n\n#### Wildcards\n\n1. `_` is a single wildcard character, can be substituted by any other individual character.\n2. `%` - similar to `*` in regex. Matches zero or more missing letters.\n\n## Aggregates\n\n### Count\n\n```SQL\n-- get quantity of free apps\nSELECT COUNT(*)\nFROM apps\nWHERE price = 0;\n```\n\n### Sum\n\nCalculate sum of particular column values. For non-numeric returns 0.0\n\n```SQL\nSELECT SUM(downloads)\nFROM apps;\n```\n\n### Max, min, avg\n\nThe highest, lowest and average value in column. For text uses lexicographical order. `AVG` for\ntext returns 0.0\n\n#### Round\n\nFor rounding value. Syntax: `ROUND(value)` or `ROUND(value, digits after dot)`.\n\n## Multiple tables\n\nAre combined with\n\n### Join\n\n```SQL\nSELECT orders.order_id,\n       customers.customer_name\nFROM orders\n         JOIN customers\n              ON orders.customer_id = customers.customer_id;\n-- customer.id will be merged\n```\n\nResult includes only rows matched on condition. Every other row is dropped. This is called an **\ninner join**.\n\n#### Foreign key\n\nWhen a primary key of another table appears in a table, it is called a **foreign key**.\n\n### Left join\n\nKeeps all rows from the left table.\n\n### Cross join\n\nCross join has m\\*n rows, where n is number of rows in the first table, m in the second.\n\n### Union\n\nAppends one column to another. Restriction: second table should have the same column data types in\nthe same order as the first one.\n\n```SQL\nselect *\nfrom newspaper\nunion\nselect *\nfrom online;\n```\n\n**Note:** unlike join, we have to specify selected columns on union (I think it is for the\nflexibility).\n\n### With\n\n```SQL\nWITH TABLE_NAME AS (...)\nSELECT *\nFROM TABLE NAME\n```\n\n`WITH` allows naming a query. Here `TABLE_NAME` is a query name and query is `...` in parentheses.\n\n## Other keywords\n\n#### IFNULL\n\n#### OFFSET\n\nused with limit to shift taken values.\n\n### IN\n\nSolution to [this leetcode problem](https://leetcode.com/problems/duplicate-emails/)\n\n```SQL\nselect DISTINCT email as Email\nfrom Person\nwhere email in (select email\n                from Person\n                group by email\n                having Count(*) \u003e 1)\n```\n\nSame as multiple `OR`'s:\n\n```SQL\n-- an example with NOT IN\nSELECT *\nFROM Customers\nWHERE Country NOT IN ('Germany', 'France', 'UK');\n```\n\n## Functions\n\n### DATE_ADD\n\nsyntax: `DATE_ADD(date, INTERVAL value unit)`\n\n```SQL\n-- add 1 day to current date\nSELECT DATE_ADD(CURDATE(), INTERVAL 1 DAY)\n-- remove 2 months from constant date\nSELECT DATE_ADD(\"2022-30-09\", INTERVAL -2 MONTH);\n```","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/ast":{"title":"Abstract Syntax Tree","content":"\nAbstract Syntax Tree (AST) is key concept in program evaluation. It is a tree with\ntokens as its nodes. Tree is a better structure than sequence. Here is why:\n\n1. Operator precedence.\n2. Hierarchy\n\n### Operator precedence\n\nConsider a following expression : $5 + 7 \\cdot 2 + 3$. It is obvious to us humans which arithmetic\noperator. we should calculate first. But it is not that simple for a machine.\nHence, we introduce a tree structure:\n\n{{\u003c svg \"static/ast_arithmetic.svg\" \u003e}}\n\nNow we need to recursively evaluate each child before calculating the result of the overall\nexpression.\n\n### Hierarchy\n\nLet's look at the following python code:\n\n```python\ndef some_method():\n    return 1\n\n\nclass SomeClass:\n    field = 1\n    other = \"other\"\n\n    def class_method(self):\n        return self\n\n    def other_one(self):\n        return \"not classMethod\"\n```\n\nHere is a sketch of AST representation:\n\n```\nsome_method:\n    type: function\n    children:\n        params: ...\n        body: ...\nSomeClass:\n    type: class\n    children:\n        field:\n            type: variable\n            children:\n                value: ...\n        other:\n            type: variable\n            children:\n                value: ...\n        class_method:\n            type: function\n            children:\n                params: ...\n                body: ...\n         other_one:\n            type: function\n            children:\n                params: ...\n                body: ...\n        \n```\n\nNotice how all the functions of class are on the same level. We could even add `fields` and\n`functions` and `classes` nodes to separate statements of different kinds:\n\n```\nfunctions:\n    some_method:\n        ...\nclasses:\n    SomeClass:\n        type: class\n        children:\n            fields:\n                field:\n                    ...\n                other:\n                   ...\n            functions:\n                class_method:\n                    ...\n                 other_one:\n                    ...\n```\n\nThis hierarchical structure is predictable and manageable.\n\n### Node structure\n\nAST trees do not have a commonly accepted structure. It's content varies depending on\nusage. But I found some general structure of AST node. Nodes usually include.\n\n* node type (declaration of class, method, variable, infix operator, block etc)\n* node value: e.g. name of a particular identifier\n* children: nodes that a re children of the current one\n* meta information: position in the initial file, path to initial file...\n\n# Creating AST\n\nA pipeline consists of two steps:\n\n`Code (text) -\u003e Tokens -\u003e CST`[^1]` -\u003e AST`\n\nTo create tokens from code, a tokenizer (aka Lexer) is used. Usually it's pretty straightforward:\nread until next whitespace, identify obtained token.\n\nTo create AST from tokens, we need a parser. I won't go into much detail here, because parsers are\ncomplicated enough for a separate [post](programming/parsers). \n\n[^1]: Some parsers create an intermediate representation of AST called concrete syntax tree. The\ndifference between AST and CST is that each AST node has a semantic purpose, while CST may contain\ndetrimental tokens that are used to make parsing of a grammar work. Example of CST generated probably\nwith a parser based on EBNF arithmetic [grammar](programming/introduction-to-grammars):\n![cst.png](programming/images/cst.png)\n`Expr`, `Term` and `Factor` nodes do not have a semantic purpose, therefore technically it is not\nan AST.","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/boxing-and-equality-cs":{"title":"C#: Boxing, unboxing and equality operator","content":"\n# Boxing / unboxing\n\nBoxing/unboxing has to do with reference and value types. Value types store their values on\nstack (usually primitives). Reference types store value in heap and reference to that value on\nstack.\n\nBoxing is process of converting value type to reference type, unboxing is\nthe opposite. These procedures are computationally expensive, because:\n\n* to box a value, a new object should be created.\n* to unbox a value, it should be cast to a particular type, which is time-consuming (albeit to a\n  lesser extent than boxing). To avoid boxing, one\n  should use generics.\n\n# Equality\n\nThere are two types of equality: reference and value.\nReference equality is applicable only to reference types.\nIt checks that two objects point to the same value in heap.\nValue equality checks that two variables contain the same value.\n\n*Note: `==` operator will call `ReferenceEquals` for reference types and is not applicable for two\nvariables of different type.*\n\n### Examples\n\n```C#\n  int a = 3;\n  object pA = a; // implicit boxing\n  object explicitPA = (object)a; // explicit boxing\n  int b = (int)pA; // explicit unboxing - cast an object to type (the only possible way)\n  int implicitUnboxing = pA; // Error: Cannot implicitly convert type 'object' to 'int'\n\n  Console.WriteLine(ReferenceEquals(a, pA)); // False\n  Console.WriteLine(Equals(a, pA)); // True\n  Console.WriteLine(ReferenceEquals((object)a, pA)); // False\n  Console.WriteLine(a == b); // True, calls Equals()\n  Console.WriteLine((object)a == (object)b); // False, calls ReferenceEquals()\n  Console.WriteLine(a == pA); // Error: Operator '==' cannot be applied to operands if type 'int' and 'object'\n```","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/cpp-pointers":{"title":"C++ Memory model","content":"\nMemory is a two column table. First row contains **addresses**, second row contains **values**.\n\n```C++\nint x = 4;\n```\n\nWhen variable is assigned, an empty memory row cell is chosen. Variable's value is written to\nsecond column of the row.\n|Address|Value|Assigned variable (not part of a memory, just a showcase example)|\n|------|------| ---- |\n|0x1000| 4| x|\n|0x1004| 0x1000|pX|\n|0x1008|4|y|\n\n# Pointer\n\n```C++\nint* pX = \u0026x;\n```\n\nVariable declaration with a `*` after type states that it is a pointer to that type. In this\ncase, **pX is an integer pointer**. Instead of storing value, pointer variable store memory address\nin their value column (second column of a memory row).\n\n`\u0026` is for extracting address from a variable. `\u0026x` means **address of variable named x**\n\n# Dereference\n\n```C++\nint y = *pX;\n```\n\nVariable with a preceding asterisk (`*`) referred to as a **dereference**. When used before a\npointer variable, this expression will return a value in a row, to which such variable points to.","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/devlog1":{"title":"Devlog 1. Bad globals","content":"\n### What is a symbol table?\n\nSymbol table stores current program state. I separated it into three levels,\nturning `SymbolTable` into a kind of manager-facade:\n\n1. **FileTable**. Contains classes, objects and functions in current file.\n2. **variableTable**. Contains functions and properties of current\n   instance (if `ClassA.someClassFunction()` is resolved, instance of ClassA is a variableTable in\n   current `SymbolTable`). Variable table is not a special class, it's either a primitive or a\n   class instance.\n3. **ScopeTable**. Contains all variables and arguments for current function.\n\n### Introduction\n\nI created global SymbolTable `globalTable` and global `imports`. It was convenient at the time.\nAll classes, functions and objects are added to the `globalTable` during semantic analysis.\nSuperclasses are defined, imports too. Semantic analysis is performed for initial file and all\nits dependencies (they are files). It is handy to write imports and file contents to global\nvariables. But when I started writing tests, it backfired.\n\n### Running tests\n\nWhen running a program once, evaluation is done once. However, when running tests, evaluation runs\nmany times. It lead to all kinds of issues:\n\n1. Functions appeared twice, especially mains, because main in current file and main from previous\n   failed session were saved.\n2. Phantom functions were called from unclean imports\n\nTo fix that, I added `clear()` function to make global Table a blank table and delete all imports.\nIt is called at the end of `evaluate()` and `eval()` (which is a light version of `evaluate()`).\nBut it was treating a symptom, not dealing with a problem. I plan to make it possible to run\nmultiple threads in parallel. So I need to remove these globals. Probably I can create an array of\nglobal tables, each thread will write to a separate table, although\nI would like to make stateless code, not add another crutch.\n\nThen I discovered same problems with tests that check failure behavior. Particularly check whether\nexceptions are thrown correctly. It appeared they\ndid, however a clean program state wasn't restored after. Exception was thrown, but `globalTable` and\n`imports` weren't cleared after. I added `clear()` on `PositionalException` initialization.\n\n### Future work\n\nAdd `imports` to `FileTable` as a property. Remove `globalTable` and pass it as an argument.\n","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/devlog2":{"title":"Devlog 2. Link class. Removing state","content":"\nLink class is for evaluating links. A link is a statement in form of `a.b.c`, where all expressions\nafter dots (in this case `b` and `c`) are either identifiers[^1], indexes[^2] or invocations[^3].\nExpression before the dot is anything, even the ternary operator.\nThese expressions are link children.\n\n### Link evaluation\n\nLinks are resolved iteratively, starting from the first expression. Every evaluated expression\nreturns a property (a type or a primitive). But the first child might be a name of an imported\nfile, therefore it is resolved differently from all the next children.\n\nDuring dynamic creation of a class it is important to know what parts of the link are\nassigned. For example:\n\n```kotlin\nclass Start {\n    a = mid.end.endProperty // a is not assigned until mid, end and endProperty are\n    mid = Middle()\n    mid.end.addedEndProperty = \"anotherEndValue\" /** it is applicable for\n        left hand-side of assignment too. mid and end need to be assigned first\n        **/\n}\nclass Middle {\n    end = End()\n}\nclass End {\n    endProperty = \"endValue\"\n}\n```\n\n### Adding state, encountering problems\n\nFor convenience, I added these properties to the link instance:\n\n* `index`: index of currently resolved child\n* `currentVariable`: value of currently resolved child\n* `currentParent`: previously resolved child\n* `table`: symbolTable with `currentVariable` as `variableTable`\n* `initialTable`: symbolTable before link\n  evaluation, used to resolve function arguments. It is useful in the following code:\n\n```kotlin\nclass A {\n    a = 0\n    b = B()\n    fun aFunction() {\n        b.bFun(a, b) /** here table will change variableTable to B instance, therefore a and b\n            properties will not be found for bFun call. That's why invocation arguments are resolved\n            using initialTable\n            **/\n    }\n}\nclass B {\n    fun bFun(arg1,arg2) {\n        // do something\n    }\n}\n```\n\nThese variables are cleared after the end of the evaluation. However, I didn't think about\nrecursive functions:\n\n```kotlin\nclass A {\n    a = if(iter \u003c 5) A() else Nothing()\n    iter = if(parent == 0) 0 else parent.iter /** parent is a special property.\n        It returns an instance from which this instance is created or 0 **/\n    fun str() {return \"iter, \" + a.str()}\n}\n\nclass Nothing() {\n    fun str() { return \"end\" }\n}\n```\n\nIn that case, when calling `str()`, variable values weren't cleared. I might've come up with some\nhack, but again, I knew that was bad\nsolution. Link represents a token, it is not a place to store evaluation values. So I moved state\nto function arguments. Link is still a poorly written class that has bugs. I work on fixing them\nand refactoring Link.\n\n[^1]: Identifier is a word, starting with a letter. All other symbols are letters, underscores or\nnumbers\n[^2]: Index is a token for getting a value from string, array or dictionary. It is an identifier\nwith square brackets. Square brackets contain index (or a key, if identifier is a name of a\ndictionary). `arrayName[2]`, `dictionaryName[\"key\"]`\n[^3]: Invocation is a function call or a class constructor. `call(a+b, someArgument=value)`\n, `ClassA(propertyName=value)`","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/heap-and-stack":{"title":"Basic memory management","content":"\n*Last fall, I had an interview.\nThey asked me about differences between heap and stack, how\nreferences and variables are stored.\nI was confident that I knew all this stuff.\nApparently, I was wrong.*\n\n# Commonalities\n\nBoth stack and heap use RAM.\n\n# Stack\n\nStack is a LIFO static[^1] storage that contains:\n\n* Local primitive variables\n* References to non-primitive variables\n* Method parameters\n* Sequence of method calls (hence, each thread has its own stack. Also, this is the reason why\n  infinite recursion will result in stack overflow error)\n\nWhen the method finishes its execution, a stack is emptied with one assembly command - moving\nthe pointer to stack head. Therefore, a stack returns to the state before that method's call.\n\n### Primitive variables\n\nLocal primitive variables are stored in stack. Primitive fields of an object instance are stored in\nheap.\n\n# Heap\n\nHeap is a dynamic memory structure that stores non-primitive variables. References (pointers to\nvariable address in the heap) to these variables are in the stack.\n\nUnlike stack, heap is commonly shared between threads. Consequently, one object shouldn't be\nmodified simultaneously from different threads.\n\nOut of memory error is possible for the heap too.\n\n### Garbage collector and C/C++ features\n\nSome languages (Java, C#) handle memory automatically. A component responsible for it is called\ngarbage collector. Fallback of this approach is unexpected runtime slowdowns due to garbage\ncollector managing memory.\n\nOther languages (C/C++) pass this responsibility on to programmer. In C++ every `new` keyword\nshould\nbe followed by `delete` to prevent memory leak. Additionally, it is possible to store object\ninstance on stack in C++, if variable is declared without `new`. Such local variable will\nbe popped from stack after method\nexecution. [A little more about C++ memory model](programming/cpp-pointers).\n\n### Heap fragmentation\n\nHeap is a single block of memory. When some memory from heap is released, a chunk of unused memory\nis formed. After many iterations heap becomes a bunch of alternating fragments of used and unused\nmemory.\n\nEssentially this is an inefficient memory utilization, because overall there might be $n$\nbytes of free memory, however not all bytes can be allocated. It is possible to allocate no more\nbytes than there are in the biggest consecutive chunk of free memory.\n\n{{\u003c svg \"static/barcode.svg\" \u003e}}\n\n*After some time heap looks like a barcode (white is free memory, black is unused memory)*\n\n[^1]: some languages allow stack reallocation","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/introduction-to-grammars":{"title":"Introduction to grammars","content":"\nGrammar defines a set of strings (words), which is called a **language**.\nEssentially grammar is a `Dictionary \u003cString, String\u003e`, where each dictionary entry is a\n**grammar rule**.\n\nOther two important definitions are terminal and non-terminal symbols.\nTerminal is a string that cannot be resolved into something else,\nunlike non-terminal. Consequently, a result of grammar resolve should always be a sequence\nof terminals.\n\nFor terminals a lowercase letter is assigned, for non-terminal a capital one. Also, there is a\nspecial starting non-terminal marked `S`\n(we assume that we start creating words starting with `S`).\n\n### Creating a grammatically correct word\n\nStarting with `S`, on each step we choose a non-terminal symbol and a rule with the same symbol on\nthe left-hand side. Then such non-terminal is replaced with the right-hand side of the rule. Until\nthere is a non-terminal, a process is continued.\n\nConsider a following example of a grammar:\n\n```\ngrammar gA\nS -\u003e a\nS -\u003e aS\n```\n\nTo create a word `aaa`:\n\n1. Have `S`, use `S -\u003e aS`, now have `aS`\n2. Use `S -\u003e aS`, result is `aaS`\n3. Use `S -\u003e a`, end with `aaa`. All non-terminals are removed.\n\nGenerally this grammar describes a language of words, containing any number of `a`s:\n$L(gA) = \\\\{a^n|n\u003e0\\\\}$\n\n### The Chomsky hierarchy\n\nGrammar with a smaller type number contains all grammars with a bigger type number.\n\n#### Context free grammar (type 2)\n\nGrammars with a single non-terminal symbol on the left of each rule are called context free\ngrammars (CFG). Because no context is required for replacing a non-terminal.\n\n#### Regular grammar (type 3)\n\nSubset of content free grammars is regular grammars.\nIt puts a restriction on the right-hand side of\nits rules, three types of expressions are allowed:\n\n* empty string\n* single terminal\n* terminal followed by non-terminal.\n\nExample of a regular grammar:\n\n```\ngrammar gR\nS -\u003e aX\nS -\u003e EOW // (end of word)\nX -\u003e bS\n```\n\nThis grammar defines a language $L(gR) = \\\\{(ab)^n|n\\geqslant0\\\\}$\n\nContext free grammar is a pushdown automata, regular grammar is a finite state machine.\n{{\u003c svg \"static/finite_state_regular.svg\" \u003e}}\n\n#### Context-sensitive grammar (type 1)\n\nContext-sensitive grammars allow left-hand side to contain context, which must be similar in the\nright-hand side. Formally speaking, each rule of context-sensitive grammar is:\n$$c_0Ac_1 \\rightarrow c_0bc_1$$ where:\n\n* $c_0,\\\\; c_1$ are sequences of terminals and non-terminals\n  (sequence might be empty),\n* $A$ is a non-terminal\n* $b$ is a non-empty sequence of terminals and non-terminals.\n\n#### Unrestricted grammar (type 0)\n\nUnrestricted grammars are grammars without any restrictions to their rules.\n\n### BNF, EBNF\n\nThere is a special Backus-Naur form and Extended Backus-Naur form (BNF, EBNF) to\ndescribe a context free grammar. This notation is used most commonly. Here is\na [python grammar defined with EBNF and PEG](https://docs.python.org/3/reference/grammar.html).\n\n# Non formal grammars\n\nBefore going any further, let's bring in some clarifications.\n\n### Grammar notation\n\nPreviously we used capitals for non-terminals and lowercase for terminals. But in real grammars\nidentifiers are used. We consider every identifier that appears on the left hand-side a\nnon-terminal (we work with grammars having only a non-terminal on the left-hand side),\nother identifiers are terminals.\n\nIntroduce new symbols:\n\n* `|` - choice operator (or). Grammar rule that contains `|` is actually multiple grammar rules:\n  `S -\u003e a | b | ... | n` is\n\n```\nS -\u003e a\nS -\u003e b\n...\nS -\u003e n\n```\n\nIf the rule is more complicated, containing nested choice operators, it is rewritten in a similar\nmanner:\n\n```\nS -\u003e (a | b) '+' d | c\n// rewritten to\nS -\u003e a '+' d \nS -\u003e b '+' d\nS -\u003e c\n```\n\n* `:` in EBNF colon replaces arrow to divide two sides of a rule. I'll stick to the arrow for\n  the time, to keep the style consistent and justify the use of code blocks\n  (I use FiraCode with ligatures in code blocks to make arrow a continuous symbol)\n\nAll grammars discussed before are formal grammars. Formal grammars have terminals and non-terminals\nin their rules and no other operators of special symbols.\n\n### Parsing expression grammars or PEGs\n\nPEGs are very similar to CFGs, but they are not **ambiguous**,\nmeaning that for any input only one AST can be generated. It is achieved by selecting the first\nmatch in a choice operator. For CFG[^1] each variant in a choice operator is equal in terms of\nprecedence (and because of that two ASTs may be generated from one input).\n\n### Recursive grammars\n\nif there is a rule with a non-terminal on the left side, which can be derived again by applying\nsome rules to the resulting expression.\n\n```\ngrammar rG\nA -\u003e aBC\nB -\u003e Db\nC -\u003e c\nD -\u003e Ad\n```\n\nrG is recursive, because:\n\n1. starting with `A -\u003e aBC`\n2. apply `B -\u003e Db` to `aBC`, get `aDbC`\n3. apply `D -\u003e Ad` to `aDbC` get `aAddC`. Non-terminal `A` is derived again.\n   Proved, that rG is recursive.\n\nAlmost all non-trivial grammars are recursive.\n\n#### Left recursion\n\nLeft recursive grammar is a grammar that contains a recursive rule, deriving form which will\neventually create the same non-terminal as the first symbol.\n\n```\ngrammar lrG\nA -\u003e BC\nB -\u003e Db\nC -\u003e c\nD -\u003e Ad\n```\n\nlrG is left recursive, because same sequence of rules as in rG will produce AddC. A is the first\nsymbol, therefore lrG is left recursive.\n\nSome parsers are unable to parse left recursive grammars, descending into infinite recursion.\nFor that reason, a grammar is rewritten, making it less humanly readable.\nAny sensible left-recursive grammar can be rewritten, I think.\nThis grammar is not reasonable: `A -\u003e A`.\n\n[^1]: When introducing CFG, I stated that it is a part of a Chomsky hierarchy, hence it is a formal\ngrammar. Consequently, only terminals and non-terminals are allowed in the rules.\nBut CFG can be mentioned outside the formal grammar set, keeping its distinctive characteristic of\none\nnon-terminal on the left-hand side. Therefore, CFG right-hand side can contain other special\nsymbols. From now on, if not explicitly specified, I'll use CFG term implying that **it is not a\nformal grammar**.","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/making-tex-to-html-cv-translator":{"title":"Making tex to html CV translator","content":"\n# Motivation\n\nFor about a year, I had CV made with [LaTeX](https://www.latex-project.org/) in Overleaf (online\nLaTeX editor). But I found it cumbersome to import new versions to Google Drive when CV was\nupdated. Therefore, I decided to translate tex cv to html.\n\n# Solutions\n\nThere are two ways to transform LaTeX to html: either transform resulting pdf file, or the `.tex`\nsources. I tried the first approach, and was unsatisfied with the results: all formatting was\nremoved, the result was plain text with some bold titles. Because of it I chose the second option\nwith translating LaTeX to html. [Latex.js](https://latex.js.org/) is a library made specifically\nfor this purpose.\n\nUnfortunately, the capabilities of Latex.js are limiting, so I had to recreate my CV with the\nminimal LaTeX supported by Latex.js[^1]. I hope, it looks similar.\n[This is my old CV](https://www.overleaf.com/read/xdgqgnyvrwkt),\nand [this is the new one](https://www.overleaf.com/read/ksdqgmdvdfcx).\n\nHere is a script for translation:\n\n```shell\n#!/usr/bin/env bash\n\n# declare constants\ncv_path=../content/cv/main.tex\ncv_html_path=../layouts/_default/cv.html\ncv=$(\u003c$cv_path)\ntemp=../scripts/output.txt\n\n# comment tex instructions that are not working in Latex.js library\necho $cv | \\\n  sed -e 's/\\\\usepackage{titlesec}/%\\\\usepackage{titlesec}/' \\\n  -e 's/\\\\pagenumbering{gobble}/%\\\\pagenumbering{gobble}/' \\\n  -e 's/\\\\titlespacing/%\\\\titlespacing/' \\\n  -e 's/\\\\titleformat/%\\\\titleformat/' \\\n  -e 's/\\\\setlength{\\\\voffset}{-20pt}/%\\\\setlength{\\\\voffset}{-20pt}/' \\\n  -e 's/\\\\makebox\\[[a-zA-Z0-9]*\\][{}a-z\\\\A-Z0-9\\.]*/%hr%/g' \\\n   \u003e $temp\n\n# create html from tex for cv\nnpx latex.js $temp -p \u003e $cv_html_path\nrm $temp\n\necho $(\u003c$cv_html_path) | sed \\\n  -e 's/   //g' \\ # remove generatedw whitepace characters\n  -e 's/­//g' \\ # here invisible char is removed\n  -e 's/\u003c\\/h2\u003e/\u003c\\/h2\u003e\u003chr\u003e/g' \\ # add horizontal line separators\n  -e 's/\u003chtml style=\"--size: [0-9\\.]*px;/\u003chtml style=\"--size: 16px;/g' \\ # change font size to 16px\n  -e 's/\u003ctitle\u003euntitled\u003c\\/title\u003e/\u003ctitle\u003eAleksey Kononov CV\u003c\\/title\u003e/g' \\ # add title\n  -e 's/\u003cspan style=\"margin-right:170.079px\"\u003e//' \\ # remove whitespace under name\n  -e 's/--marginparwidth: [0-9\\.]*%;/--marginparwidth: 60%;/' \\ # change date margin width\n  -e 's/\\(--[A-Za-z]*: [0-9]*\\)\\.[0-9]*/\\1/g' \\ # remove all floating point values for zoom to work\n  \u003e $cv_html_path\n```\n\nI used a lot of string replacements by utilizing\n[sed](https://www.gnu.org/software/sed/manual/sed.html) command. The most frequent use of\nit consists of command with three elements:`'s/\u003cSTRING\u003e/\u003cREPLACEMENT\u003e/\u003cFLAG\u003e/'`, where `\u003cFLAG\u003e`\nis `g` to change all the occurrences or empty to change only the first one. To make multiple\nreplacements, chain them with argument `-e`.\n\n# Results\n\nAfter that, I wanted to check if I really improved my time. Here are the steps needed to get link\nto cv with tex-html translator or by Google Drive sharing:\n\n{{\u003c svg \"static/google_drive_vs_site_for_cv.html\" \u003e}}\n\nWell, it doesn't seem that new solution is any better that the old one. But often I forgot to\ndelete previous CV from Downloads, therefore needed to do some additional steps.\nAdditionally, now I have a short and readable [CV link](https://llesha.github.io/cv)!\n\n[^1]: On thi step I could completely dump the idea and recreate my CV purely using html. I'm sure\nthat there are great tools for exporting html to pdf. But I thought that having a CV in a .tex\nformat is more respectable or something.","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/multithreading1":{"title":"Multithreading. Primitive tools, definitions","content":"\nFirst, let's clarify some definitions (I won't go too deep into that):\n\n### Process\n\n**Process** is a running program, that has its own address space in memory (most of it is heap).\n**Multithreading** is running multiple programs in OS simultaneously (like browser, messenger, IDE,\ntask\nmanager...)\n\n### Thread\n\n**Thread** is an execution unit of a process, it uses process heap but has its own stack.\n\n**Parallelism** or **multithreading** is multiple threads running at once.\n\n**Concurrency** means managing multiple threads of execution, not necessarily at the same time.\nParallelism is a method of concurrency (I'm not sure about that one, I took it from\n[here](https://stackoverflow.com/questions/4844637/what-is-the-difference-between-concurrency-parallelism-and-asynchronous-methods#comment5379841_4844774))\n.\n\n### Asynchronous and synchronous\n\nSynchronous blocks of code execute after each other, **next one cannot be executed before previous\nis not finished**. Imperative language statements are synchronous (code runs line by line).\nAsynchronous blocks of code, which are also called **tasks** might run simultaneously, their run\nindependently[^1] form each other.\n\n### Basic multithreading tools in Java\n\nJava has a `Thread` class and a `Runnable` interface. Both of them have a `run()` method, which\nbody\nis executed asynchronously to the main thread[^2], when `start()` is invoked. Example of starting\nRunnable and Thread asynchronously:\n\n```java\npublic static void main(String[] args) {\n    Runnable ir = ImplementedRunnable();\n    Thread t = Thread(ir); // to run a runnable, instantiate a wrapper-thread\n    Thread dt = DerivedThread();\n    t.start();\n    dt.start();\n    // result of this code might be \"thread runnable \" or \"runnable thread \", it is not determined.\n}\n\nclass DerivedThread extends Thread {\n    public void run() {\n        System.out.print(\"thread \");\n    }\n}\n\nclass ImplementedRunnable implements Runnable {\n    public void run() {\n        System.out.print(\"runnable \");\n    }\n}\n```\n\n#### Useful thread methods\n\nThread's execution might be interrupted with `Thread.interrupt()`.\n\n`Thread.join()` will make a current thread wait until a joined thread instance finished its\nexecution.\n\n```java\n\nvoid joinExample() {\n  Thread dt = DerivedThread();\n  dt.start();\n  dt.join();\n  System.out.print(\"2\");\n  // calling joinExample() always prints \"thread 2\"\n}\n```\n\n### Synchronized block/method\n\nSynchronized blocks can be run only by one thread at a time. This is done by creating a **\nmonitor** (aka **lock**), which is some object that a running thread takes. Only a thread with a\nmonitor A can access a synchronized block, that is synchronized on monitor A.\n\nSynchronized method is implicitly locked on the instance that its being invoked on. Static\nsynchronized methods lock on the class itself.\n\n### Atomic\n\nAtomic actions are performed momentarily and cannot be interrupted. They either complete or not run\nat all. Atomic operations:\n\n* read/write references and primitive values, excluding `long` and `double`\n* read/write variables with `volatile` keyword.\n  There are special classes, like `AtomicInteger` that make all its main operations (addition,\n  multiplication...) atomic.\n\n[^1]: well, if they use synchronous methods, then some of their runtime is dependent.\n[^2]: when a program is started, a main thread is created. It is a user thread. Main difference\nbetween daemon and user threads is that a program won't finish until there is a running user\nthread. Daemon threads are service threads, for instance garbage collection is a daemon thread.","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/multithreading2":{"title":"Multithreading. Problems, Object methods","content":"\n### Thread problems\n\nThread problems have names. Here are the most popular ones.\n\n#### Deadlock\n\nN locks locked forever, waiting for each other. For instance, two monitors are required to move\nfurther, and two threads have one monitor taken. They both will be waiting until another monitor is\nfreed, which won't happen. In Java there are no tools to identify deadlock.\n\n#### Livelock\n\nThreads interact with each other not performing any useful work.\n\n#### Starvation\n\nThread waits for monitor access for too long, while other threads access that monitor multiple\ntimes.\n\n### Useful synchronization Object methods\n\nAll following methods require a thread to have a monitor. Hence, these methods can be used only\nin `synchronized` block/method.\n\n**wait()**. When reaching this command, thread frees a monitor and is put into a waiting\nlist, pausing its execution. Usually `wait()` is surrounded in a `while` cycle.\n\n**notify()**. Frees one random thread waiting for a particular monitor and gives them a monitor.\n\n**notifyAll()**. Empties a waiting list of threads waiting. A random thread gets a monitor, while\nall other threads go back to waiting list. The only difference that I found out with `notify()` is\nthat with `notify()` JVM selects a thread, with `notifyAll()` the system thread scheduler does it.\nProbably system thread scheduler guarantees that all waiting threads will, in some time, acquire\nlock, while JVM does not (it might accidentally pick a subset of waiting threads all the time,\nputting other threads to starvation).\n\n#### Spurious wakeups\n\nSometimes waiting threads can get out of a waiting list. This happens due to specific thread\nimplementations in different OS. Also thread can be woken from an `interrupt()` call. That is one\nreason why `wait()` should be surrounded in a `while` block - to put spontaneously woken thread\nback into waiting.","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/parsers":{"title":"Parsers","content":"*As with the first article, I wrote this one on a computer, because the topic is hard to tackle. I\nknew I would have to make a lot of edits and rearrangements. So technically I'm two days behind my\nschedule, but we're just going to ignore that.*\n\n# Parser traits\n\nThese traits are not exactly definitive features for a parser. However, these definitions are often\nmentioned, so it's good to know what they mean.\n\n### Recursive descent\n\nRecursive descent parser is a program, where each [grammar](programming/introduction-to-grammars) rule is implemented as a separate method.\nSometimes all rules describing one terminal are combined into a single method.\n\n{{\u003c svg \"static/recursive_parser.svg\" \u003e}}\n\n### Back-tracking and non back-tracking\n\nBack-tracking parser looks some tokens behind to define a position of current token in a tree. Non\nback-tracking parsers do not use previous tokens.\n\n# Most  common parser classification\n\nLL and LR are the most often mentioned parsers in this context. And their distinct features are\nbeing top-down and bottom-up respectfully.\n\n### Top-down parser.\n\nThis parser creates a tree from root to leaves.\n\n##### LL(k) parser\n\nLeft-to-right, leftmost derivation. Parses tokens from left to right, looking k\ntokens ahead. Uses context free grammar.\n\nCan be implemented either as a recursive descent or a pushdown automata.\n\n*Note: a subset of languages that can be parsed with LL(k) parser is\ncalled LL(k) languages.*\n\n### Bottom-up parser.\n\nUnlike top-down, creates tree starting from leaves and finishing at root.\n\n##### LR(k) parser\n\nLeft-to-right, rightmost derivation. Uses CFG. Starts with tokens of higher priority, eventually\nbuilding its way from leaves to root (the higher the node, the less priority it has. Look\nat [AST arithmetic example](programming/ast)).\n\nImplementation uses pushdown automata or deterministic finite automation. Works in linear time.\n\n# Other parsers\n\n### Operator precedence parser\n\nIs a parser for, you guessed it, operator precedence grammars. OP is a CFG with no empty right-hand\nside rules and no rules with adjacent non-terminals.\n\n##### Operator precedence implementation\n\nPratt parser is a top-down operator precedence parser. This parser is rarely mentioned. It is based\non the idea of led, nud and std functions. Each token has (or has not) led, nud and std functions.\nThese functions basically tell how this token is related to ones around it. All parsing is embedded\ninto these functions, with some additional ones: expression and statement functions.\n\n* Nud is null denotation, used for primary tokens like numbers and\n  identifiers and prefix operators\n* Led is left denotation, describe how a token relates to its left neighbor. Used for infix\n* Std is statement denotation, is for statements: assignment, return keyword\n\n#### PEG parser\n\nParser parsing expression grammar.\n\n##### PEG parser implementation\n\nPackrat parser implements recursive descent with infinite lookahead. Requires more memory than LL\nparser, but supports left recursion.\n\n*I don't think this is an exhaustive list of parsers, and it's shallow. However, it's in sync with\ngrammar post, one can be read after another*","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/programming-notes":{"title":"Programming notes","content":"\nLinks to all articles:\n\n## 2022\n\n28 June: [Heap and Stack](programming/heap-and-stack)\n\n29 June: [How languages are run?](programming/transpilers-compilers-interpreters)\n\n30 June: [Abstract syntax tree](programming/ast)\n\n1 July: [C#: boxing, unboxing and equality operator](programming/boxing-and-equality-cs)\n\n2 July: [Introduction to grammars](programming/introduction-to-grammars)\n\n3 July:\n\n1. [Parsers](programming/parsers),\n2. added CST definition to [AST post](programming/ast) and moved\n   parser classification to parsers,\n3. added non-formal grammars section to [grammars post](programming/introduction-to-grammars),\n\n4 July: [Devlog 1. Bad globals](programming/devlog1)\n\n5 July: [Devlog 2. Link class. Removing state](programming/devlog2)\n\n6 July: [Shallow traits of a villain](programming/shallow-villain-traits). Update a page to view.\nSimilarly, update on return\n\n7 July: [Multithreading. Primitive tools, definitions](programming/multithreading1)\n\n8 July: [Multithreading. Problems](programming/multithreading2)\n\n9 July: [Quality of life](programming/quality-of-life)\n\n10 July: [Why game making is not for me](programming/why-gamemaking-is-not-for-me)\n\n---\n\n30 September: [SQL basics](programming/SQL.md)\n\n---\n\n## 2023\n\n27 July: [Making tex to html CV translator](programming/making-tex-to-html-cv-translator)","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/quality-of-life":{"title":"Quality of life","content":"\nRecently I started working on a new project, that also requires creating a custom programming\nlanguage. I noticed a significant difference with changing my approach: now I use python\nand [Lark](https://github.com/lark-parser/lark) for parsing EBNF.\n\n### Lark vs writing your own lexer and parser\n\nI regret not spending more time researching kotlin EBNF parsers. I tried ANTLR, but it had many\nincompatible versions, therefore I didn't use it. Additionally, antlr generated java code that\nwon't work with javascript. Plus, I found some others parsers, all of them generated parsers during\nruntime. I thought it was bad. However, Lark generates parsers during runtime too.\n\nWriting EBNF grammar is faster and less error-prone. Moreover, it is faster to change existing\ngrammar, compared to programmatically written lexer and parser. I\nrewrote [this](https://github.com/cristiandima/tdop) Go code into Kotlin and customized it for my\nlanguage. That took a lot of time, even without considering bug fixes.\n\n### Python vs Kotlin\n\nIt might not be as important for others, but I prefer interpreted languages because after a small\nchange in code it starts as fast, compared to compiled language. Compilation is a slow process that\nhinders development for me.\n\n### Working in a group vs alone\n\nThis time we work together with my friend, and I have to say, it is much better than working alone.\nWhen you are on your own, it is easy to miss some obvious mistakes. Discussing solutions leads to\nbetter ones. Maybe, that way it's not always going to be the way I want, but who said that my\nvision is correct? Besides, we both have a similar goal.\n\n### Conclusions\n\n1. Spend more time researching ready solutions. It will pay off during development, more time will\n   be saved overall\n2. If working alone, find likeminded people to share ideas and discuss design decisions. Get\n   feedback from them.\n3. ~~Use interpreted languages~~","lastmodified":"2023-06-27T10:36:05.554685825Z","tags":null},"/programming/shallow-villain-traits":{"title":"Shallow villain traits","content":"","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/programming/transpilers-compilers-interpreters":{"title":"How languages are run?","content":"\nPeople in the programing languages field use fancy buzzwords like **translator, transpiler,\ncompiler, interpreter**, **JIT** (just in time) compiler. Let's figure out what they mean. But\nbefore let's create some sort of programming language hierarchy:\n\n1. High level programming language\n2. Assembly language (low-level language that is still programmable by humans)\n3. Machine code (runs on processor, no reason to write it, because it is undecipherable without\n   helper tools and is processor-specific)\n\n### Translator\n\n**Translator** is a general word for transpilers, compilers and interpreters. It's a tool\nconverting one code to another one (low-level or high level).\n\n### Compiler\n\n**Compilers** create machine code before runtime, which they save into binary files. Each\nprocessor[^1] requires a special compiler. Plus, compiler depends on a platform. Say, there is\na compiler for C++ targeted for the Linux OS and a particular processor.\n\nBenefits of compilers are:\n\n1. Run once to create executable files. Afterwards, run execs each time a program is started.\n2. Compilation is a form of program analysis, which will detect errors (called compilation errors)\n   before running a program, with, for instance, heavy calculations (thus, speeding the refactoring\n   process).\n\nBut there is a considerable drawback for a compiled language. Every little change in the program\nrequires recompilation of the whole module.\n\nLanguages that are compiled: C, C++, Haskell, Rust, Go\n\n### Interpreter\n\n**Interpreters**, on the other hand, can stumble upon such error that compiler could remove,\nbecause\nthey translate a program line by line, during runtime. Due to this translation thing going, a\ntranspiler is initially slower than an already compiled code. But there is a catch, when running a\nprogram line by line, there is more information that can be extracted, because interpreter will see\nvariable values that are impossible to analyse statically, before a program is run[^2]. That\nis where JIT compiler comes into play. It finds runtime optimizations and identifies parts of code\nwhich are faster to compile and execute rather than execute line by line (a default way of\ninterpreter).\n\nBriefly, interpreters:\n\n1. Translate code during runtime, line by line\n   (that is why most of the debuggers are interpreters).\n2. Do not create executable files.\n\nInterpreted languages: Python, Perl, Ruby\n\n### Transpiler\n\nIt is a tool that converts source code of one language to source code of the other language.\nUsually referred to as translators between two high level languages. Transpiler is called source to\nsource compiler sometimes.\n\n### Assembler\n\nAlso, there is a less frequently used term. **Assemblers**. Essentially, they are compilers for\nassembly language. Assemblers convert assembly code into machine code before runtime. I think it\nis a part of a compiler (compilation is a two-step process: translate language into assembly\nlanguage, then translate assembly into machine language).\n\n### Is Java compiled or interpreted?\n\nJava's source code is compiled into a binary byte code.\nThis code runs on JVM (technically not a\nprocessor), that usually is a blazingly fast interpreter (and\noften with a JIT compiler), that maps byte-code commands to processor\ncommands. Java can be considered both compiled and\ninterpreted language, similarly to Kotlin and Scala (JVM languages). Oftentimes though, Java is\nthought to be compiled.\n\nBut I think it is possible to write an interpreter for any compiled language and a compiler for any\ninterpreted language. Therefore, language classification in terms of compiled/interpreted\nlanguages is suggestive, not mandatory.\n\n### Linker\n\nLinker is a program that links compiled files. It resolves imports.\n\n[^1]: I'm not sure that compiler cannot target multiple processors at once. ISA (Instruction set\narchitecture) of processor is an important thing. Different processors with similar ISAs might be\ntargeted by one compiler.\n\n[^2]: And this cannot be fixed by compiling a program twice: first to run it and find optimizations\nduring runtime, and second to create optimized binary executables. This is because optimizations do\ndepend on the input arguments, which may vary vastly.","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/programming/why-gamemaking-is-not-for-me":{"title":"Why game making is not for me","content":"TLDR: it is frustrating, initial idea and result have a huge difference, because I associate my\ngame ideas with emotions, that a player feels during the game. When playing a made game I don't\nfeel these emotions at all.\n\n### Game feel\n\nGame feel is the set of emotions that a person experiences during play session. Game feel is\nsubjective for everyone. It is **the only thing that defines game value[^1]**.\n\n### How I used to make games\n\nI came up with a spectacular game idea[^2]. Not long time after, I imagine a default play session,\nwhat\na player should do, **how he would feel**. Right from the start I merge game feel with an idea. And\nthis is the path to failure.\n\nThing is, I'm a good engineer. I'm capable of implementing my game idea. But I also expect that\nwhen playing a resulting game, I would experience expected emotions. And it never happens.\nProbably, because it is a job of a game designer.\n\n{{\u003c svg \"static/gameidea_cycle.svg\" \u003e}}\n\n### Profession of a game designer\n\nI think game designer is responsible for the game feel. It's a whole field, that I know nothing\nabout. Unlike me, a good game designer can predict what emotions will a player feel during a game.\nOr, more importantly, game designer knows, **how** to change an existing product towards a better\ngame feel.\n\n### Conclusion\n\nTo prevent frustration, I shouldn't connect ideas with emotions. If I find an idea to be fun in my\nhead, I should not expect it to be fun in reality. There are two ways to be better at making fun\ngames:\n\n1. Learn some game design (not game creation)\n2. Iterate, hoping that you are heading towards better game feel. Might not work.\n\n[^1]: You might say: \"What a bold statement! How about beautiful graphics? Interesting mechanics?\nDon't you think that a game with a bad game feel is valuable because of its graphics?\" No, I don't.\nIn this case graphics are valuable by themselves. You evaluate graphics from the point of its\nvisual value. Therefore, if a game has a bad game feel, it's bad as a game, it's not fun to play.\nAll its parts might be fine but game value is not defined by them in separate, important thing is\n**how all pieces together contribute to the emotions that a player feels during the game**.\n\n[^2]: In this context, I refer to the **game idea** as an interesting original mechanic, raw\ngameplay loop, without much detail. I prototype this mechanic, because I think it would be fun to\nplay.","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/advanced":{"title":"Things that hopefully you will never encounter","content":"But are good to know anyway.\n\n## Dictionary mutable key\n\n```kotlin\nfun main() {\n    a = [1]\n    t = {a: \"value\"}\n    print(t)\n    print(t[[1]])\n    a.add(2)\n    print(t)\n    print(t.entries[0][\"key\"])\n    print(t[t.entries[0][\"key\"]])\n    print(t[[1, 2]])\n}\n```\n\n```kotlin\nfun main() {\n    val a = mutableListOf(\"a\")\n\tval m = mutableMapOf(a to \"b\")\n    println(m[mutableListOf(\"a\")]) // b\n    a.add(\"b\")\n    println(m) // {[a, b]=b}\n    println(m[mutableListOf(\"a\", \"b\")]) // null\n}\n```\n\n```python\n# frozenset\n# tuple\n```","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/design-decisions":{"title":"Design decisions","content":"\n## ~~Why null is 0?~~ *now it is not*\n\nFirst, let's provide some context.\n\nI do not find void type useful. Therefore, void == null.\n\nNow, let's state all cases when null appears:\n\n1. function call with no return\n2. parent property[^1]\n3. `?.` operator.\n\nNot many cases to consider, only last one is the meaningful one. It is important to throw\nexceptions for not found properties, because it might be a typo. Typos are hard to find. `?.`\noperator exists if user intentionally wants to ignore non-existing property. This is very useful to\nwrite concise code. Without `?.` we have to write something like this:\n\n```kotlin\n// Say, want to check if svgArgs in a exist. \n// Then do some operations with them.\nif(a.properties.has(\"svgArgs\")) {...} // without ?.\nif(a?.svgArgs != 0) {...} // with ?.\n...\n// Better example:\nclass A {\n    iter = if(parent == 0) 1 else parent.iter + 1 // without ?.\n    iter = parent?.iter + 1 // with ?.\n}\n```\n\nFirst example has a problem: when using `?.` we can't really differentiate whether `a` has a\nproperty `svgArgs` which value is 0, or `a` does not have such property. However, I think it is an\nissue only in a language where null as a no-reference exists.\n\n**The answer to this question is:**\n\n1. I find 0 to be more useful than no-reference object, when null appears.\n2. and for now I don't see many disadvantages of such design decision\n\n## Defining functions in language\n\nEmbedded functions are functions that are translated from kotlin. All global functions and\ntype functions are embedded.\n[Here is an implementation of global functions (GitHub).](https://github.com/llesha/Regina/blob/ab48513b0a11ed21e710eec94660b7951137eafb/src/commonMain/kotlin/evaluation/FunctionFactory.kt#L49)\n\nIt seems natural for me to shorten embedded functions quantity as much as possible (and write them\nin created language[^2]). I had three reasons to add many:\n\n1. **Historical reason.** I was writing my own all-in-one parser-interpreter which was primitive (\n   yet usable) and adding\n   function parsing and evaluation was overwhelming.\n2. **Logical reason.** I cannot embed all the functions in the world. `log`, `write` and `read`\n   functions access lower-level APIs that are impossible to define in\n   a language itself (at least not in mine).\n3. **Even more logical reason**. If Regina's Array is just a MutableList from kotlin, why not use\n   existing implementations?\n\n[^1]: Probably I will remove `parent` property for non-class instances. I don't remember why this\nfeature exists. Nevertheless, it is too early to remove without giving it proper thought.\n\n[^2]: At least to see how well language works.\n\n## Symbol Table\n\nSymbol table is a common idea in language processing, it goes hand in hand\nwith [scopes](../docs/Scopes.md).\n\nSymbol table is a solution to three concerns:\n\n1. Minding scopes,\n2. Handling imports,\n3. Recording variable names.\n\nIt is organized as three tables:\n\n1. [FileTable](https://github.com/llesha/Regina/blob/master/src/commonMain/kotlin/table/FileTable.kt)\n    - for storing all declarations in class (imports are references to other FileTables)\n2. VariableTable - contains all declarations for type instance (properties and functions).\n   VariableTable is a variable itself (class or a primitive).\n3. [ScopeTable](https://github.com/llesha/Regina/blob/master/src/commonMain/kotlin/table/ScopeTable.kt)\n    - contains all assigned variables inside a function body.\n\nSymbolTable is a [God-manager](https://en.wikipedia.org/wiki/God_object), but it is needed to\nhandle all get requests (get function, get variable, etc).\n\n## Variable names\n\nStrings are keys for each map. Each string is a name for corresponding variable/type/function. It\nsolves third problem\nand makes sharing reference-type values between variables straightforward, unlike storing name in\na variable class[^1] (how to store multiple names? When to\nremove a name? etc.)\n.\n\n[^1]: at first I implemented this design. Then I created SymbolTable and had many refactorings\nbefore finally decomposing it into three different classes-tables.","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/dynamic-instantiation":{"title":"Dynamic instantiation","content":"\n## TLDR\n\nDifference between other languages and ReGIna is dynamic instantiation. In\nshort, properties in classes will be assigned only after their dependencies are assigned, allowing\nrecursive properties\nof same class `A` inside class `A`.\n\n## Idea\n\nClasses can have references to other classes inside them as\nproperties. These property-classes are evaluated dynamically. Take a look at this example:\n\n```kotlin\nclass Node export rect {\n    // export = false - can deny export\n    iter = if (parent) parent.iter + 1 else 0\n\n    childNode = if (iter == 5) Nothing() else Node()\n\n    position = if (childNode is Node) \\\n    Position(childNode.position.x + 1, childNode.position.y) \\\n    else Position(0, 0)\n}\n\nfun main() {\n    Node()\n}\n```\n\nThis will create following svg:\n\n```svg\n\n\u003csvg\u003e\n    \u003crect x=\"4\" y=\"0\"/\u003e\n    \u003crect x=\"3\" y=\"0\"/\u003e\n    \u003crect x=\"2\" y=\"0\"/\u003e\n    \u003crect x=\"1\" y=\"0\"/\u003e\n    \u003crect x=\"0\" y=\"0\"/\u003e\n\u003c/svg\u003e\n```\n\nFirst algorithm creates empty Node() (we'll call it *Node0*) from main(). Then, starting from top\nto bottom:\n\n1. algorithm assigns **iter** of *Node0* to 0 because parent returns 0 as an equivalent of null.\n2. After that, **childNode** is assigned a new Node (*Node1*).\n3. **position** cannot be assigned because **childNode.position** is not yet assigned. Algorithm\n   goes to\n   childNode.position, that is *Node1*.position and tries to assign it. However, childNode is\n   required, so we go to *\n   Node1*.childNode, which needs iter.\n\n*It's not important to consider while assigning values, but it shows why there cannot be any cyclic\ndependencies for properties*.\n\n## How not to write code with dynamic instantiation\n\n### Bad class function\n\n```kotlin\nclass FunctionOveruse {\n    prop = make()\n\n    fun make() {\n        FunctionOveruse()\n        return prop\n    }\n}\n```\n\nBoth lines in ```make()``` will execute forever.\n\nTo make functions as expressive as possible, it is important to allow class instantiating inside\nthem. If\n\nWe either make internal class functions (which is purely decompositional thing) or make\ninstantiating inside functions\npossible (and ```fun main()``` as an entry point)","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/global":{"title":"Global","content":"Global is a file that's imported by default.\n```kotlin {title=\"Global.rgn\"}\n    fun print(x): Null {\n        // print `x` into console\n    }\n    \n    fun except(x) {\n        // throws exception with `x` as message\n    }\n    \n    fun input(input): Any {\n        // not working in [IDE]()*. Receives console input and returns it.\n    }\n    \n    fun write(content: String, path: String) {\n        // write `content` to `path` file\n    }\n    \n    fun read(path: String): String {\n        // read file from `path` and return the result\n    }\n    \n    fun exists(path: String): Bool {\n        // checks if file by `path` exists.\n    }\n    \n    fun delete(path: String): Bool {\n        // delete file by `path`, return true if file existed\n    }\n    \n    fun test(x: Bool) {\n        // throw exception if x is false\n    }\n    \n    fun rnd(isInt = false): Number {\n        // random Double value (or Int value, if `isInt == true`).\n        // Use {{\u003crefer \"regina/std/math/#functions\" \"std.math.rndInt and std.math.rndDouble\" \u003e}}  instead.\n    }\n    \n    fun seed(x) {\n        // not working in [IDE]()\n        // change random seed for a rnd() and all random functions\n    }\n    \n    fun str(x) {\n        // call toString() for `x`\n    }\n    \n    fun int(x) {\n        // convert x to Int (x might be String or Double)\n    }\n    \n    fun double(x) {\n        // convert x to Double (x might be String or Int)\n    }\n    \n    fun list(x) {\n        // convert x to list\n    }\n    \n    fun type(x) {\n        // get type of x\n    }\n    \n    fun copy(x) {\n    }\n    \n    fun floatEquals(first: Number,\n                    second: Number,\n                    epsilon: Number = 0.0000000000000000000000000001,\n                    absTh: Number = 0.0000001): Bool {\n    }\n    \n    fun range(start: Int, end: Int, step: Int = 1) {}\n```\n## Functions\n\nIf you defined a function with the same signature, these functions are called with `Global.`\nprefix, [similar to other imports]().","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/ide":{"title":"IDE","content":"","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/regina":{"title":"ReGIna","content":"\nis a [dynamically typed](regina/typization) language with [syntax](regina/syntax) similar to\nKotlin and Python.\n\n## Documentation\n\nIt is highly recommended to read in following order, don't click on links in articles for the first\ntime:\n\n1. [syntax](regina/syntax) - language expressions and what they do.\n2. [visibility scopes, access priorities](regina/scopes) - how a file is structured.\n3. [variable types](regina/types) - all types are listed, their properties, functions and features.\n4. [dynamic instantiation](regina/dynamic-instantiation) - core language idea.\n\n\n\n## Advantages\n\n* **Can be embedded into web**. Regina is written in Kotlin and compiled into Javascript.\n* **Rapid generator development**. Online IDE has an SVG result field to show what each program does.\n\n## Drawbacks\n\n* **It's slow**. It's definitely slower than Python. Yet it's designed to be fast and concise in\n  creating generators.\n* **There is no community**. At least not yet. Mail me at kononal@gmail.com if you created\n  something about Regina.\n\n## Examples\n\n`flowers.rgn`\n\n![flowers](regina/flowers_example.png)\n\n`animals.rgn`\n\n![animals](regina/animals_example.png)\n\n","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/scopes":{"title":"Visibility scopes","content":"{{\u003c table_of_contents \u003e}}\n\nAll scopes, sorted from the most visible to the least:\n\n## Global scope\n\nClasses, objects and functions[^1] are declared in global scope. Imported file declarations are in\nglobal scope too. Global scope declarations are visible **everywhere**.\n\n## Class instance scope\n\nIn class instance scope properties and functions are declared. These declarations are visible\n**from a class instance and inside class functions**.\n\n```kotlin\n/** this program prints:\nchanged\nin class\nin global\n**/\nfun main() {\n    a = A(prop=\"changed\")    \n    print(a.logger()) // function called from an instance\n}\n\nclass A {\n    // here prop, this.func and logger are visible\n    prop = \"prop\"\n    fun func() { return \"in class\" }\n    fun logger(param = prop) {\n        print(param)\n        print(this.func())\n        return func()\n    }\n}\n\nfun func() { return \"in global\"}\n```\n\n## Function scope\n\nFunctions can have variable assignments and blocks. Functions change its reference arguments. All\nglobal scope declarations: other global functions, class constructors, object variables are\nvisible inside a function body.\n\n```kotlin\nobject Colors {\n    BLACK = \"000000\"\n}\n\nclass A {}\n\nfun change(argArr, argInstance) {\n    arg.add(2) // assuming arg is a list\n    Colors.BLACK = \"111111\" // Colors.BLACK is changed\n    argInstance.property = 3 // property will change outside of function scope\n} \n\nfun main() {\n    arr = []\n    a = A()\n    change(arr,a )\n    // here arr == [2],\n    // a.property == 3\n}\n```\n\nVariables are visible from anywhere below the variable declaration.\n\n```kotlin\nfun scope() { \n    i = 0\n    while(i \u003c 5) {\n        a = 1\n        i = i + 1\n    }\n    return a // here a is visible and equals 1\n}\n```\n\n*This behaviour differs from most of the languages, consequently it might change in future.*\n\n## Block scope\n\nBlocks change already defined values. Variables defined inside of blocks are visible outside to the\nend of the function scope.\n\nBlock scope is nonexistent in some sense.\n\n```kotlin\nfun someFunction() {\n    a = 5\n    // a == 5\n    while (condition) {\n        a = 3\n        b = 2\n        // a == 3\n    }\n    // a == 3\n    // b == 2\n}\n```\n\n## Accessing declarations with same names\n\nEach file might contain only one function with a particular signature. Same holds for classes and\nobjects. However, it is okay to have class and function with the same name\n(and no function params) - in this case class will be shadowed by that function.\n\n```kotlin\nclass same {}\nfun same() {return 1}\nclass difSignature {}\nfun difSignature(param) {}\nfun main() {\n    print(same()) // 1\n    print(difSignature()) // class instance\n}\n```\n\n### Import priority\n\nIf imported file contains a declaration with the same name as existing,\n\n```kotlin {title=\"std.geometry2D.rgn\"}\nclass Point {\n...\n}\n...\n```\n\nCurrent file's declaration is prioritized.\n\n```kotlin {title=\"main.rgn\"}\nimport std.geometry2D as geom\n\nclass Point {}\n\nfun main() {\n    p = Point() // main.Point instance\n    pGeom = geom.Point() // std.geometry2D.Point instance\n}\n```\n\n\u003e [!warning]- Same in different imports\n\u003e\n\u003e If two imports contain two similarly named declarations (say, both of them\n\u003e have `object Constants`) and current file does not have such declaration,\n\u003e using that declaration without file prefix is prohibited. That's because it is ambiguous which\n\u003e declaration to use.\n\n### Using functions with same signature\n\nFunction signature consists of:\n\n1. function name\n2. number of parameters\n\nPriority:\n\n1. Local function **always** has priority over imported one (second step is not applicable, if\n   there is a local function that can be called).\n2. Top level function is prioritized over a class function[^2].\n3. Then, find a function with the least number of unspecified default parameters[^3] (those which\n   are\n   not arguments in a call). For instance, if there are functions:\n\n    1. `fun fn(a1, a2) {...}`,\n    2. `fun fn(a1, a2, a3 = 1) {...}`,\n\n   and the call is `fn(1,1)`, first function is called.\n\nKeep in mind, that inherited functions are simply added to the current subclass. If current class\ndefines the same function, superclass function is shadowed. Following example might clear things:\n\n```kotlin\nfun main() {\n   s = Subclass()\n   print(s.fn()) // \"base\"\n   log(s.shadow()) // \"this is called\"\n}\n\nclass Superclass {\n   fun fn() {return \"base\"} \n   fun shadow() {return \"not called\"}\n}\n\nclass Subclass: Superclass {\n   fun fn(a = 1) {\"not called, because fn without default parameters has more priority\"}\n   fun shadow() {return \"this is called\"}\n}\n```\n\n[^1]: Functions can be declared in classes too.\n\n[^2]: This is due to the fact that class instance function can be called with `this.` prefix.\nCurrent class function does not have a prefix to be called with.\n[^3]: Currently if there are two functions in **different** imports that both can be called,\nprogram will throw an error saying that it cannot pick needed function.","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/std/math":{"title":"std/math.rgn","content":"\n## Functions\n`rndInt`","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/syntax":{"title":"Syntax","content":"\n{{\u003c table_of_contents \u003e}}\n\nReGIna's syntax is an amalgamation of kotlin and python.\n\n## Top level declarations\n\nEssentially, file is a set of classes, objects, functions and imports. Executable and importable\nfiles have `.rgn` format.\n\n### Class\n\nClass declaration should satisfy following format:\n\n```kotlin \nclass ClassName : SuperClassName {\n    ...\n}\n```\n\nwhere `: SuperClassName` is optional.\n\nClass contains properties and functions.\n\n### Object\n\nSimilar syntax to type, although it cannot be inherited.\n\n```kotlin\nobject ObjectName {\n    ...\n}\n```\n\nObject is a singleton that is lazily initialized (when a property is called, it is initialized and\neverything needed for its initialization).\n\n```kotlin\nobject Lazy {\n    a = b\n    b = 1\n    c = 2\n}\n\nfun main() {\n    // here nothing in Lazy is initialized\n    log(Lazy.a)\n    // here Lazy.a and Lazy.b are initialized, c is not\n}\n\n```\n\n### Function\n\nFunction has non-default parameters and default parameters. Default parameters go after other ones.\n\n```kotlin\nfun functionName(param0, param1, ..., default_param0 = defaultValue, ...) {\n    functionBody\n}\n```\n\n{{\u003c refer \"regina/scopes/#using-functions-with-same-signature\"\n\"Accessing functions with same signature\" \u003e}}.\n\n### Imports\n\n\u003e [!warning] Warning\n\u003e\n\u003e Do not use following file names: Global.rgn, this.rgn\n\nImports are declarations that allow to use objects, classes and functions from an imported file.\n\n## Operators\n\n*Take a look at a [table of operator precedence](/regina/toop)*\n\n`+` non commutative addition with implicit type conversion. All use cases:\n\n```kotlin\n// List + Any \u003c=\u003e List.add(Any)\n[1, 2] + 3 // == [1,2,3]\n// String + Any \u003c=\u003e String + Any.toString()\n\"Hello, \" + \"Alex\" // == \"Hello, Alex\"\n// Int + Double or Double + Int \u003c=\u003e double(Int) + Double\n1 + 3.2 = 4.2\n```\n\n`if(...) .. else ..` - ternary operator is kotlin-like.\n\n### Boolean operators\n\nBoolean operators return 0 and 1 respectively\n(non-)equality: `==`, `!=`\n\nComparison: `\u003e`, `\u003c`, `\u003e=`, `\u003c=`\n\nLogical operators: `\u0026\u0026`, `||`. As in other languages, if left operand is enough to resolve an\noperator, right operator is not evaluated\n\n`!`: not prefix operator. Inverts expression.\n\n#### Boolean values\n\n`true` is 1, `false` is 0. {{\u003c refer \"regina/types/#boolean\"\n\"Boolean is Int.\" \u003e}}\n\nExamples:\n\n```kotlin\n// true and false are 1 and 0 respectfully. \n// There is no boolean type, only keywords,\n// that are changed to numbers during runtime \ntrue // == 1\nfalse // == 0\n!true // == 0\n```\n\n\u003e [!note] Notes\n\u003e\n\u003e In the future, `\u0026` and `|` operators might be added.\n\n### Arithmetic operators\n\n### Ternary operator\n\n\n### Property/variable assignment\n\n```kotlin\nvariableName = ...\nclassName.PropertyName = ...\n```\n\nVariables and properties are dynamic, meaning they are type independent. `a` can be String and in\nthe next line it can\nbe Int or class instance.\n\n## References\n\nReferences are expressions of form `a.b.c`. They serve 3 purposes:\n\n1. accessing class/object properties\n2. accessing primitive/class/object and functions\n3. specifying package declarations\n4. reducing expressions\n\n## Cycles\n\n### while\n\nwhile is a cycle which body executes until the condition is false.\n\n```kotlin\ncondition = 1\nwhile(condition) {\n    \n}\n```\n\n### foreach\n\nforeach has:\n\n1. an iterator name\n2. an iterable (List, String or range)\n3. body\n\nForeach will run the body for all the elements of collection.\n\n#### Foreach in list\n\n```kotlin\narr = [1, [], 3, [], 5]\nforeach(i in arr) {\n    if(i is List)\n        i.add(\"a\")\n    else i = i + 1\n}\n// arr == [1, [\"a\"], 3, [\"a\"], 5]\nforeach(i in arr) {\n    arr.remove(i)\n}\n// arr == [[\"a\"], [\"a\"]]\n// this happens because foreach internally \n// iterates over a collection by an index.\n// t\n// it is very unadvisable to modify collection's size inside foreach.\n```\n\n#### Foreach in String\n\nSimilar to list, but all iterable elements are not changeable\n\n#### Foreach in range\n\n```kotlin\n// range is a unique function used only inside foreach\n// it has 3 arguments, where third is optional: step\nli = []\nforeach(i in range(0, 10, 2))\n    li.add(i)\n// li == [0, 2, 4, 6, 8, 10]\n// if step is not specified, it equals to 1 or -1,\n// depending on start and end\nforeach(i in range(1, 3))\n    li.add(i + 10)\n// li == [0, 2, 4, 6, 8, 10, 11, 12, 13]\nforeach(i in range(3, 0)) {\n    li.removeAt(i)\n}\n// li == [8, 10, 11, 12, 13]\n```\n\n### 1. Accessing properties\n\n# Code conventions\n\nCamel case is used.\n\nNames of [class](Syntax.md/###Class), [object](Syntax.md/###Object) start with capital.\n\nVariables, functions start with lowercase letter.\n\n## Accessing and assigning collection elements\n\n### List\n\n```kotlin\nempty = [] // create empty list\nfilled = [1, \"2\", [3, 4], {5:6}] // create list with elements\n\n```\n\n### Dictionary\n\n```kotlin\ndict = {1:2} // dict key value pair is created with a colon\ndict[1] // accessing value by dict key\ndict[\"key\"] = \"value\" // assigning value to key\ndict[\"not found\"]\n```\n\n[^1]: `in` is not a keyword and a class, object, function or variable can be named `in`. On the\nother hand, `as` is a keyword.","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/toop":{"title":"Table of operator precedence","content":"\n{{\u003c svg \"static/operator_precedence.html\" \u003e}}","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/types":{"title":"Types","content":"{{\u003c table_of_contents \u003e}}\n\nThere are three value types and three reference types.\n\n### Value types\n\n1. Int\n2. Double\n3. String\n\n### Reference types\n\n1. List\n2. Dictionary\n3. Class instance\n\nAssigning another variable a variable of a reference type will pass it by reference. Same holds for\npassing function arguments\n\n```kotlin\nfun main() {\n    arr = []\n    change(arr)\n    // here arr == [1]\n    other = arr\n    other.removeAt(0)\n    // here arr == []\n}\n\nfun change() {\n    arr.add(1)\n}\n```\n\n## Null\n\nNull is same as in kotlin or onter languages.\n\n## Number\n\nAn abstract class, has Int and Double as inheritants. `Number` can be encountered in type check:\n\n```kotlin\n0.1 is Number // true\n2 is Number // true\n\"3\" is Number // false\n```\n\n### Documentation\n\n```kotlin\nclass Number {\nfun abs(): Number {\n    // absolute value\n}\n\nfun min(other:Number): Number {\n    // minimum of `this` and `other`\n}\n\nfun max(other:Number): Number {\n    // maximum of `this` and `other`\n}\n\nfun pow(deg: Number): Double {\n    // `this` to power of `deg`\n}\n\nfun round(digits: Number = 0): Double {\n    // number rounded to `digits` number of digits\n    // after point. Rounds away from zero: `(-0.5).round() == -1`\n}\n\nfun floor(digits: Number = 0): Int {\n    // return biggest integer smaller or equal than target\n}\n\nfun ceil(digits: Number = 0): Int {\n    // return smallest integer greater or equal than target\n}\n\nfun intDiv(divisor: Number): Int {\n    // result of an integer division\n}\n\nfun sqrt(): Double {\n    // square root\n}\n\n// Trigonometry\n    fun sin(): Double {}\n    fun cos(): Double {}\n    fun asin(): Double {}\n    fun acos(): Double {}\n    fun tan(): Double {}\n    fun atan(): Double {}\n    fun atan2(x: Number): Double {} // `this` is considered as `y` of atan2\n}\n\n```\n\n### Boolean\n\nNumeric values are interpreted as boolean values in conditions (e.g. `if(condition)`\n, `while(condition)`). 0 is considered to be false, everything else is true.\n[Boolean operators](), return 1 and 0 respectfully.\n\n### Int\n\n#### Documentation\n\n```kotlin\nclass Int: Number {\n    Int.MIN_VALUE // returns -2147483648\n    Int.MAX_VALUE // returns 2147483647\n}\n```\n\n### Double\n\nCurrently, NaN, positive infinity and negative infinity are not supported (expect a behaviour\nsimilar to kotlin, however working with these constants might give unexpected results).\n\n```kotlin\n// do not use following expressions:\n 0 / 0 // NaN\n 1 / 0 // Infinity\n-1 / 0 // -Infinity\n```\n\n#### Documentation\n\n```kotlin\nclass Double: Number {\n    Double.MAX_VALUE // returns 1.7976931348623157E308\n    Double.MIN_VALUE // returns 4.9E-324\n}\n```\n\n## String\n\n### Documentation\n\n```kotlin\nclass  String {\n    size // get number of characters in string\n    \n    // These functions do not change the initial string\n    fun has(found: String): Bool {\n        // returns found's existence\n    }\n    \n    fun index(found: String): Int {\n        // first index of found else -1\n    }\n    \n    fun substring(start: Int, end: Int = this.size): String {\n        // string from start (inclusive) to end (non-inclusive)\n    }\n    \n    fun replace(oldString: String, newString: String): String {\n        // returns string with all occurrences\n        // of `oldString` changed to `newString`\n    }\n    \n    fun reversed(): String {\n        // reversed string\n    }\n    \n    fun lowercase(): String {\n        // initial string with lowercase letters\n    }\n    \n    fun uppercase(): String {\n        // initial string with uppercase letters\n    }\n}\n```\n\n## List\n\n### Documentation\n\n```kotlin\nclass List {\n    size // number of list elements\n    fun add(element, index: Int = this.size)\n    {\n        //inserts element to list at `index`\n    }\n    \n    fun remove(element): Int\n    {\n        // remove element, get index of removed element (or -1, if not found)\n    }\n    \n    fun removeAt(index: Int): Any\n    {\n        // returns removed element from `index`\n    }\n    \n    fun has(element): Bool\n    {\n        // returns element's existence\n    }\n    \n    fun index(found): Int\n    {\n        // returns first index of `found` or -1 if not found\n    }\n    \n    fun joinToString(separator: String = \", \"): String\n    {\n        // creates a string from list elements, separated by `separator`\n    }\n    \n    fun clear(): Null\n    {\n        // removes all elements from List\n    }\n    fun sort(desc: Bool = false): Null\n    {\n        // sorts target list in place\n    }\n    \n    fun sorted(desc: Bool = false): List\n    {\n        // does not sort target, returns sorted list.\n    }\n}\n```\n\n## Dictionary\n\n## Documentation\n\n```kotlin\nclass Dictionary {\n    size // number of entries in dictionary\n    keys // list of all keys\n    values // list of all values\n    entries // list of dictionaries for all entries. For example,\n\n    fun remove(key): Any {\n        // remove key and get associated value\n    }\n\n    fun has(key): Bool {\n        // check if key exists\n    }\n}\n```\n\n### Examples\n\n```kotlin\n{1:2, \"3\":\"4\"}.entries \n// == [{\"key\":1, \"value\":2}, {\"key\":\"3\", \"value\":\"4\"}]\n```\n\n## Type\n\n### properties\n\nProperties that each instance has:\n\n`parent` - null or parent of this instance\n\n`properties` - dictionary of all properties\n\n### Constructor\n\nClass `A` instance is created with `A()` call. In parentheses properties are overridden and added.\nConstructor properties are the first ones to resolve\nduring [dynamic instantiation](regina/dynamic-instantiation).\n\n```kotlin\nfun main() {\n    defaultA = A() // instance with property p == 2\n    changedA = A(t = 1, p = 3) // instance with properties t == 1 and p == 3\n}\n\nclass A {\n    p = 2\n}\n```\n\n### Inheritance\n\nSubclass takes all properties and functions of a superclass. Although they are overridable:\n\n```kotlin\nclass Base {\n    baseProp = \"base\"\n    unchanged = \"same\"\n\n    fun fn() { return \"in base\" }\n}\n\nclass Inherited: Base {\n    baseProp = \"overridden\"\n    \n    fun fn() {return \"inherited\"}\n}\n\nfun main() {\n    i = Inherited()\n    // i.unchanged == \"same\"\n    // i.baseProp == \"overridden\"\n    // i.fn() == \"inherited\"\n}\n```\n\n\u003e [!note] Note\n\u003e\n\u003e In future each class might have a `super` keyword to access parent functions. Parent properties\n\u003e aren't going to be accessible due to [dynamic instantiation](regina/dynamic-instantiation)\n\n## Object\n\nObject is a singleton type. It does not have a constructor and is closed for inheritance.\nEverything else is similar to class.","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/typization":{"title":"","content":"Dynamically typed languages check variable type during runtime, meaning it is more **error-prone**.On the contrary,\nstatically typed languages check variable type during compilation.\n\nOften dynamically typed languages can reassign the same variable with a different type. Also, variable declaration and\nassignment are similar for dynamic languages.\n\n```Python\n# Python\na = 2\na = \"2\" # not an error\n```\n\nOne of the clues of static typing is in variable declaration:\nusually variables have a type before a name in declaration:\n\n```C\n // C\n int a = 2;\n a = 3;\n```\n\nHowever, it is not always the case:\n\n```Kotlin\n// Kotlin\nval a = 2\n```\n\nIn Kotlin variable declaration prefix determines its mutability and type is derived from the expression on the right.\n","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null},"/regina/why":{"title":"","content":"# Why I created a programming language\n\nTLDR: I didn't think about making a library for dynamic instantiation. I should've made a library -\nthat is an optimal path.\n\n## Birth of 'generator or generators'\n\nI liked creating visual generators. But I didn't like spending 2 weeks to flesh out an idea and to\nimplement unuseful\ntools like deployment to web or geometry functions.\n\n*Looking back, I realise that I wasted much time due to switching between tools: for plant\ngenerator I used C# and .NET, for House generator I used Godot and for map generator Kotlin with\nKorGE (there I spend much time figuring out how to use KorGE and writing my own geometry function)\n.*\n\nI needed a tool to create generators. And I started thinking about it. On this stage, there was no\nintention on creating a language, all the more so, I was unqualified at that time. I unofficially\ncalled this tool the \"generator of generators\".\n\n## Generator stages\n\nI had these project specifications (from most to least priority):\n\n1. It should be possible to create generators of any complexity\n2. It should be concise\n3. Non-programmers should be able to use it\n\n### Web tool\n\nGeometry primitives:\n\n* Segment\n* Rectangle\n* Polygon/polyline (smooth)\n* Ellipse\n* Arc (circle)\n*\n\nThree types of containers:\n\n1. Variant\n2. Recursive\n3. Container\n\n![Image](images/firstdesign.jpg)\n\n### Early stages of language development\n\n### Upgrading language","lastmodified":"2023-06-27T10:36:05.558685817Z","tags":null}}