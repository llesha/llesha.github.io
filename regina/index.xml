<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reginas on</title><link>https://alex5041.github.io/regina/</link><description>Recent content in Reginas on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://alex5041.github.io/regina/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://alex5041.github.io/regina/typization/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/typization/</guid><description>Dynamically typed languages check variable type during runtime, meaning it is more error-prone.On the contrary, statically typed languages check variable type during compilation.</description></item><item><title/><link>https://alex5041.github.io/regina/why/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/why/</guid><description>Why I created a programming language TLDR: I didn&amp;rsquo;t think about making a library for dynamic instantiation. I should&amp;rsquo;ve made a library - that is an optimal path.</description></item><item><title>Design decisions</title><link>https://alex5041.github.io/regina/design-decisions/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/design-decisions/</guid><description>Why null is 0? I do not find void type useful. Therefore, void == null.
Now, let&amp;rsquo;s state all cases when null appears:</description></item><item><title>Global</title><link>https://alex5041.github.io/regina/global/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/global/</guid><description>Global is a file that&amp;rsquo;s imported by default.
Functions If you defined a function with the same signature, these functions are called with Global.</description></item><item><title>IDE</title><link>https://alex5041.github.io/regina/ide/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/ide/</guid><description/></item><item><title>ReGIna</title><link>https://alex5041.github.io/regina/regina/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/regina/</guid><description>is a dynamically typed language with syntax similar to Kotlin and Python.
Core idea Difference between other languages and ReGIna is dynamic instantiation.</description></item><item><title>std/math.rgn</title><link>https://alex5041.github.io/regina/std/math/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/std/math/</guid><description>Functions rndInt</description></item><item><title>Syntax</title><link>https://alex5041.github.io/regina/syntax/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/syntax/</guid><description>Table of Contents Declarations Class Object Function Imports Operators Boolean operators Boolean values Property/variable assignment References Cycles while foreach Foreach in array Foreach in String Foreach in range 1.</description></item><item><title>Table of operator precedence</title><link>https://alex5041.github.io/regina/toop/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/toop/</guid><description>Table of operator precedence Operator Description postfix: (), [], . change operators' precedence with parentheses takes element from array or string gets property of class prefix: !</description></item><item><title>Types</title><link>https://alex5041.github.io/regina/types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/types/</guid><description>Table of Contents Value types Reference types Number Functions Null Boolean Int Properties Double Properties String properties functions Array properties functions Dictionary properties functions Type properties There are three value types and three reference types.</description></item><item><title>Visibility scopes, access priorities</title><link>https://alex5041.github.io/regina/scopes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://alex5041.github.io/regina/scopes/</guid><description>Table of Contents Global scope Class instance scope Function scope Block scope Accessing declarations with same names Import priority Using functions with same signature All scopes, sorted from the most visible to the least:</description></item></channel></rss>